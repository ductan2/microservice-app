// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type AddFlashcardInput struct {
	SetID        string   `json:"setId"`
	FrontText    string   `json:"frontText"`
	BackText     string   `json:"backText"`
	FrontMediaID *string  `json:"frontMediaId,omitempty"`
	BackMediaID  *string  `json:"backMediaId,omitempty"`
	Hints        []string `json:"hints,omitempty"`
}

type CreateFlashcardSetInput struct {
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
}

type CreateLessonInput struct {
	Code        *string `json:"code,omitempty"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
}

type CreateLevelInput struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

type CreateTagInput struct {
	Slug string `json:"slug"`
	Name string `json:"name"`
}

type CreateTopicInput struct {
	Slug string `json:"slug"`
	Name string `json:"name"`
}

type Flashcard struct {
	ID           string    `json:"id"`
	SetID        string    `json:"setId"`
	FrontText    string    `json:"frontText"`
	BackText     string    `json:"backText"`
	FrontMediaID *string   `json:"frontMediaId,omitempty"`
	BackMediaID  *string   `json:"backMediaId,omitempty"`
	Ord          int       `json:"ord"`
	Hints        []string  `json:"hints,omitempty"`
	CreatedAt    time.Time `json:"createdAt"`
}

type FlashcardSet struct {
	ID          string       `json:"id"`
	Title       string       `json:"title"`
	Description *string      `json:"description,omitempty"`
	TopicID     *string      `json:"topicId,omitempty"`
	LevelID     *string      `json:"levelId,omitempty"`
	CreatedAt   time.Time    `json:"createdAt"`
	CreatedBy   *string      `json:"createdBy,omitempty"`
	Cards       []*Flashcard `json:"cards"`
}

type FlashcardSetList struct {
	Items      []*FlashcardSet `json:"items"`
	TotalCount int             `json:"totalCount"`
	Page       int             `json:"page"`
	PageSize   int             `json:"pageSize"`
}

type Lesson struct {
	ID          string     `json:"id"`
	Code        *string    `json:"code,omitempty"`
	Title       string     `json:"title"`
	Description *string    `json:"description,omitempty"`
	Topic       *Topic     `json:"topic,omitempty"`
	Level       *Level     `json:"level,omitempty"`
	IsPublished bool       `json:"isPublished"`
	Version     int        `json:"version"`
	CreatedBy   *string    `json:"createdBy,omitempty"`
	CreatedAt   time.Time  `json:"createdAt"`
	UpdatedAt   time.Time  `json:"updatedAt"`
	PublishedAt *time.Time `json:"publishedAt,omitempty"`
}

type Level struct {
	ID   string `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

type MediaAsset struct {
	ID          string    `json:"id"`
	StorageKey  string    `json:"storageKey"`
	Kind        MediaKind `json:"kind"`
	MimeType    string    `json:"mimeType"`
	Bytes       int       `json:"bytes"`
	DurationMs  *int      `json:"durationMs,omitempty"`
	Sha256      string    `json:"sha256"`
	CreatedAt   time.Time `json:"createdAt"`
	UploadedBy  *string   `json:"uploadedBy,omitempty"`
	DownloadURL string    `json:"downloadURL"`
}

type Mutation struct {
}

type Query struct {
}

type Tag struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
	Name string `json:"name"`
}

type Topic struct {
	ID        string    `json:"id"`
	Slug      string    `json:"slug"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
}

type UpdateLevelInput struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UpdateTagInput struct {
	Slug *string `json:"slug,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UpdateTopicInput struct {
	Slug *string `json:"slug,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UploadMediaInput struct {
	File       graphql.Upload `json:"file"`
	Kind       MediaKind      `json:"kind"`
	MimeType   string         `json:"mimeType"`
	Filename   *string        `json:"filename,omitempty"`
	UploadedBy *string        `json:"uploadedBy,omitempty"`
}

type MediaKind string

const (
	MediaKindImage MediaKind = "IMAGE"
	MediaKindAudio MediaKind = "AUDIO"
)

var AllMediaKind = []MediaKind{
	MediaKindImage,
	MediaKindAudio,
}

func (e MediaKind) IsValid() bool {
	switch e {
	case MediaKindImage, MediaKindAudio:
		return true
	}
	return false
}

func (e MediaKind) String() string {
	return string(e)
}

func (e *MediaKind) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaKind", str)
	}
	return nil
}

func (e MediaKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MediaKind) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MediaKind) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
