// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type AddFlashcardInput struct {
	SetID        string   `json:"setId"`
	FrontText    string   `json:"frontText"`
	BackText     string   `json:"backText"`
	FrontMediaID *string  `json:"frontMediaId,omitempty"`
	BackMediaID  *string  `json:"backMediaId,omitempty"`
	Hints        []string `json:"hints,omitempty"`
}

type ContentTag struct {
	TagID    string         `json:"tagId"`
	Kind     ContentTagKind `json:"kind"`
	ObjectID string         `json:"objectId"`
	Tag      *Tag           `json:"tag,omitempty"`
}

type ContentTagInput struct {
	TagID    string         `json:"tagId"`
	Kind     ContentTagKind `json:"kind"`
	ObjectID string         `json:"objectId"`
}

type CreateFlashcardSetInput struct {
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
}

type CreateLessonInput struct {
	Code        *string `json:"code,omitempty"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
}

type CreateLessonSectionInput struct {
	Type LessonSectionType `json:"type"`
	Body map[string]any    `json:"body"`
}

type CreateLevelInput struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

type CreateQuestionOptionInput struct {
	Ord       int     `json:"ord"`
	Label     string  `json:"label"`
	IsCorrect bool    `json:"isCorrect"`
	Feedback  *string `json:"feedback,omitempty"`
}

type CreateQuizInput struct {
	LessonID    *string `json:"lessonId,omitempty"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	TimeLimitS  *int    `json:"timeLimitS,omitempty"`
}

type CreateQuizQuestionInput struct {
	Type        string         `json:"type"`
	Prompt      string         `json:"prompt"`
	PromptMedia *string        `json:"promptMedia,omitempty"`
	Points      *int           `json:"points,omitempty"`
	Metadata    map[string]any `json:"metadata,omitempty"`
}

type CreateTagInput struct {
	Slug string `json:"slug"`
	Name string `json:"name"`
}

type CreateTopicInput struct {
	Slug string `json:"slug"`
	Name string `json:"name"`
}

type Flashcard struct {
	ID           string    `json:"id"`
	SetID        string    `json:"setId"`
	FrontText    string    `json:"frontText"`
	BackText     string    `json:"backText"`
	FrontMediaID *string   `json:"frontMediaId,omitempty"`
	BackMediaID  *string   `json:"backMediaId,omitempty"`
	Ord          int       `json:"ord"`
	Hints        []string  `json:"hints,omitempty"`
	CreatedAt    time.Time `json:"createdAt"`
}

type FlashcardCollection struct {
	Items      []*Flashcard `json:"items"`
	TotalCount int          `json:"totalCount"`
	Page       int          `json:"page"`
	PageSize   int          `json:"pageSize"`
}

type FlashcardFilterInput struct {
	HasMedia *bool `json:"hasMedia,omitempty"`
}

type FlashcardOrderInput struct {
	Field     FlashcardOrderField `json:"field"`
	Direction OrderDirection      `json:"direction"`
}

type FlashcardSet struct {
	ID          string       `json:"id"`
	Title       string       `json:"title"`
	Description *string      `json:"description,omitempty"`
	TopicID     *string      `json:"topicId,omitempty"`
	LevelID     *string      `json:"levelId,omitempty"`
	CreatedAt   time.Time    `json:"createdAt"`
	CreatedBy   *string      `json:"createdBy,omitempty"`
	Tags        []*Tag       `json:"tags"`
	Cards       []*Flashcard `json:"cards"`
}

type FlashcardSetFilterInput struct {
	TopicID   *string `json:"topicId,omitempty"`
	LevelID   *string `json:"levelId,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
	Search    *string `json:"search,omitempty"`
}

type FlashcardSetList struct {
	Items      []*FlashcardSet `json:"items"`
	TotalCount int             `json:"totalCount"`
	Page       int             `json:"page"`
	PageSize   int             `json:"pageSize"`
}

type FlashcardSetOrderInput struct {
	Field     FlashcardSetOrderField `json:"field"`
	Direction OrderDirection         `json:"direction"`
}

type Lesson struct {
	ID          string           `json:"id"`
	Code        *string          `json:"code,omitempty"`
	Title       string           `json:"title"`
	Description *string          `json:"description,omitempty"`
	Topic       *Topic           `json:"topic,omitempty"`
	Level       *Level           `json:"level,omitempty"`
	IsPublished bool             `json:"isPublished"`
	Version     int              `json:"version"`
	CreatedBy   *string          `json:"createdBy,omitempty"`
	CreatedAt   time.Time        `json:"createdAt"`
	UpdatedAt   time.Time        `json:"updatedAt"`
	PublishedAt *time.Time       `json:"publishedAt,omitempty"`
	Tags        []*Tag           `json:"tags"`
	Sections    []*LessonSection `json:"sections"`
}

type LessonCollection struct {
	Items      []*Lesson `json:"items"`
	TotalCount int       `json:"totalCount"`
	Page       int       `json:"page"`
	PageSize   int       `json:"pageSize"`
}

type LessonFilterInput struct {
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
	IsPublished *bool   `json:"isPublished,omitempty"`
	Search      *string `json:"search,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
}

type LessonOrderInput struct {
	Field     LessonOrderField `json:"field"`
	Direction OrderDirection   `json:"direction"`
}

type LessonSection struct {
	ID        string            `json:"id"`
	LessonID  string            `json:"lessonId"`
	Ord       int               `json:"ord"`
	Type      LessonSectionType `json:"type"`
	Body      map[string]any    `json:"body"`
	CreatedAt time.Time         `json:"createdAt"`
}

type LessonSectionCollection struct {
	Items      []*LessonSection `json:"items"`
	TotalCount int              `json:"totalCount"`
	Page       int              `json:"page"`
	PageSize   int              `json:"pageSize"`
}

type LessonSectionFilterInput struct {
	Type *LessonSectionType `json:"type,omitempty"`
}

type LessonSectionOrderInput struct {
	Field     LessonSectionOrderField `json:"field"`
	Direction OrderDirection          `json:"direction"`
}

type Level struct {
	ID   string `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

type MediaAsset struct {
	ID           string    `json:"id"`
	StorageKey   string    `json:"storageKey"`
	Kind         MediaKind `json:"kind"`
	MimeType     string    `json:"mimeType"`
	FolderID     *string   `json:"folderId,omitempty"`
	OriginalName string    `json:"originalName"`
	ThumbnailURL *string   `json:"thumbnailURL,omitempty"`
	Bytes        int       `json:"bytes"`
	DurationMs   *int      `json:"durationMs,omitempty"`
	Sha256       string    `json:"sha256"`
	CreatedAt    time.Time `json:"createdAt"`
	UploadedBy   *string   `json:"uploadedBy,omitempty"`
	DownloadURL  string    `json:"downloadURL"`
}

type MediaAssetCollection struct {
	Items      []*MediaAsset `json:"items"`
	TotalCount int           `json:"totalCount"`
	Page       int           `json:"page"`
	PageSize   int           `json:"pageSize"`
}

type MediaAssetFilterInput struct {
	FolderID   *string    `json:"folderId,omitempty"`
	Kind       *MediaKind `json:"kind,omitempty"`
	UploadedBy *string    `json:"uploadedBy,omitempty"`
	Sha256     *string    `json:"sha256,omitempty"`
	Search     *string    `json:"search,omitempty"`
}

type MediaAssetOrderInput struct {
	Field     MediaAssetOrderField `json:"field"`
	Direction OrderDirection       `json:"direction"`
}

type Mutation struct {
}

type Query struct {
}

type QuestionOption struct {
	ID         string  `json:"id"`
	QuestionID string  `json:"questionId"`
	Ord        int     `json:"ord"`
	Label      string  `json:"label"`
	IsCorrect  bool    `json:"isCorrect"`
	Feedback   *string `json:"feedback,omitempty"`
}

type Quiz struct {
	ID          string          `json:"id"`
	LessonID    *string         `json:"lessonId,omitempty"`
	Title       string          `json:"title"`
	Description *string         `json:"description,omitempty"`
	TotalPoints int             `json:"totalPoints"`
	TimeLimitS  *int            `json:"timeLimitS,omitempty"`
	CreatedAt   time.Time       `json:"createdAt"`
	Tags        []*Tag          `json:"tags"`
	Questions   []*QuizQuestion `json:"questions"`
}

type QuizCollection struct {
	Items      []*Quiz `json:"items"`
	TotalCount int     `json:"totalCount"`
	Page       int     `json:"page"`
	PageSize   int     `json:"pageSize"`
}

type QuizOrderInput struct {
	Field     QuizOrderField `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type QuizQuestion struct {
	ID          string            `json:"id"`
	QuizID      string            `json:"quizId"`
	Ord         int               `json:"ord"`
	Type        string            `json:"type"`
	Prompt      string            `json:"prompt"`
	PromptMedia *string           `json:"promptMedia,omitempty"`
	Points      int               `json:"points"`
	Metadata    map[string]any    `json:"metadata"`
	Options     []*QuestionOption `json:"options"`
}

type QuizQuestionCollection struct {
	Items      []*QuizQuestion `json:"items"`
	TotalCount int             `json:"totalCount"`
	Page       int             `json:"page"`
	PageSize   int             `json:"pageSize"`
}

type QuizQuestionFilterInput struct {
	Type *string `json:"type,omitempty"`
}

type QuizQuestionOrderInput struct {
	Field     QuizQuestionOrderField `json:"field"`
	Direction OrderDirection         `json:"direction"`
}

type Tag struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
	Name string `json:"name"`
}

type Topic struct {
	ID        string    `json:"id"`
	Slug      string    `json:"slug"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
}

type UpdateLessonInput struct {
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
}

type UpdateLessonSectionInput struct {
	Type *LessonSectionType `json:"type,omitempty"`
	Body map[string]any     `json:"body,omitempty"`
}

type UpdateLevelInput struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UpdateQuestionOptionInput struct {
	Ord       *int    `json:"ord,omitempty"`
	Label     *string `json:"label,omitempty"`
	IsCorrect *bool   `json:"isCorrect,omitempty"`
	Feedback  *string `json:"feedback,omitempty"`
}

type UpdateTagInput struct {
	Slug *string `json:"slug,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UpdateTopicInput struct {
	Slug *string `json:"slug,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UploadMediaInput struct {
	File       graphql.Upload `json:"file"`
	Kind       MediaKind      `json:"kind"`
	MimeType   string         `json:"mimeType"`
	Filename   *string        `json:"filename,omitempty"`
	UploadedBy *string        `json:"uploadedBy,omitempty"`
	FolderID   *string        `json:"folderId,omitempty"`
}

type ContentTagKind string

const (
	ContentTagKindLesson       ContentTagKind = "LESSON"
	ContentTagKindQuiz         ContentTagKind = "QUIZ"
	ContentTagKindFlashcardSet ContentTagKind = "FLASHCARD_SET"
)

var AllContentTagKind = []ContentTagKind{
	ContentTagKindLesson,
	ContentTagKindQuiz,
	ContentTagKindFlashcardSet,
}

func (e ContentTagKind) IsValid() bool {
	switch e {
	case ContentTagKindLesson, ContentTagKindQuiz, ContentTagKindFlashcardSet:
		return true
	}
	return false
}

func (e ContentTagKind) String() string {
	return string(e)
}

func (e *ContentTagKind) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentTagKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentTagKind", str)
	}
	return nil
}

func (e ContentTagKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ContentTagKind) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ContentTagKind) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type FlashcardOrderField string

const (
	FlashcardOrderFieldOrd       FlashcardOrderField = "ORD"
	FlashcardOrderFieldCreatedAt FlashcardOrderField = "CREATED_AT"
)

var AllFlashcardOrderField = []FlashcardOrderField{
	FlashcardOrderFieldOrd,
	FlashcardOrderFieldCreatedAt,
}

func (e FlashcardOrderField) IsValid() bool {
	switch e {
	case FlashcardOrderFieldOrd, FlashcardOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e FlashcardOrderField) String() string {
	return string(e)
}

func (e *FlashcardOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlashcardOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlashcardOrderField", str)
	}
	return nil
}

func (e FlashcardOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FlashcardOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FlashcardOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type FlashcardSetOrderField string

const (
	FlashcardSetOrderFieldCreatedAt FlashcardSetOrderField = "CREATED_AT"
	FlashcardSetOrderFieldCardCount FlashcardSetOrderField = "CARD_COUNT"
)

var AllFlashcardSetOrderField = []FlashcardSetOrderField{
	FlashcardSetOrderFieldCreatedAt,
	FlashcardSetOrderFieldCardCount,
}

func (e FlashcardSetOrderField) IsValid() bool {
	switch e {
	case FlashcardSetOrderFieldCreatedAt, FlashcardSetOrderFieldCardCount:
		return true
	}
	return false
}

func (e FlashcardSetOrderField) String() string {
	return string(e)
}

func (e *FlashcardSetOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlashcardSetOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlashcardSetOrderField", str)
	}
	return nil
}

func (e FlashcardSetOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FlashcardSetOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FlashcardSetOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type LessonOrderField string

const (
	LessonOrderFieldCreatedAt   LessonOrderField = "CREATED_AT"
	LessonOrderFieldPublishedAt LessonOrderField = "PUBLISHED_AT"
	LessonOrderFieldVersion     LessonOrderField = "VERSION"
)

var AllLessonOrderField = []LessonOrderField{
	LessonOrderFieldCreatedAt,
	LessonOrderFieldPublishedAt,
	LessonOrderFieldVersion,
}

func (e LessonOrderField) IsValid() bool {
	switch e {
	case LessonOrderFieldCreatedAt, LessonOrderFieldPublishedAt, LessonOrderFieldVersion:
		return true
	}
	return false
}

func (e LessonOrderField) String() string {
	return string(e)
}

func (e *LessonOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LessonOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LessonOrderField", str)
	}
	return nil
}

func (e LessonOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *LessonOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e LessonOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type LessonSectionOrderField string

const (
	LessonSectionOrderFieldOrd       LessonSectionOrderField = "ORD"
	LessonSectionOrderFieldCreatedAt LessonSectionOrderField = "CREATED_AT"
)

var AllLessonSectionOrderField = []LessonSectionOrderField{
	LessonSectionOrderFieldOrd,
	LessonSectionOrderFieldCreatedAt,
}

func (e LessonSectionOrderField) IsValid() bool {
	switch e {
	case LessonSectionOrderFieldOrd, LessonSectionOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e LessonSectionOrderField) String() string {
	return string(e)
}

func (e *LessonSectionOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LessonSectionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LessonSectionOrderField", str)
	}
	return nil
}

func (e LessonSectionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *LessonSectionOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e LessonSectionOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type LessonSectionType string

const (
	LessonSectionTypeText     LessonSectionType = "TEXT"
	LessonSectionTypeDialog   LessonSectionType = "DIALOG"
	LessonSectionTypeAudio    LessonSectionType = "AUDIO"
	LessonSectionTypeImage    LessonSectionType = "IMAGE"
	LessonSectionTypeExercise LessonSectionType = "EXERCISE"
)

var AllLessonSectionType = []LessonSectionType{
	LessonSectionTypeText,
	LessonSectionTypeDialog,
	LessonSectionTypeAudio,
	LessonSectionTypeImage,
	LessonSectionTypeExercise,
}

func (e LessonSectionType) IsValid() bool {
	switch e {
	case LessonSectionTypeText, LessonSectionTypeDialog, LessonSectionTypeAudio, LessonSectionTypeImage, LessonSectionTypeExercise:
		return true
	}
	return false
}

func (e LessonSectionType) String() string {
	return string(e)
}

func (e *LessonSectionType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LessonSectionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LessonSectionType", str)
	}
	return nil
}

func (e LessonSectionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *LessonSectionType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e LessonSectionType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type MediaAssetOrderField string

const (
	MediaAssetOrderFieldCreatedAt MediaAssetOrderField = "CREATED_AT"
	MediaAssetOrderFieldBytes     MediaAssetOrderField = "BYTES"
)

var AllMediaAssetOrderField = []MediaAssetOrderField{
	MediaAssetOrderFieldCreatedAt,
	MediaAssetOrderFieldBytes,
}

func (e MediaAssetOrderField) IsValid() bool {
	switch e {
	case MediaAssetOrderFieldCreatedAt, MediaAssetOrderFieldBytes:
		return true
	}
	return false
}

func (e MediaAssetOrderField) String() string {
	return string(e)
}

func (e *MediaAssetOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaAssetOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaAssetOrderField", str)
	}
	return nil
}

func (e MediaAssetOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MediaAssetOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MediaAssetOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type MediaKind string

const (
	MediaKindImage MediaKind = "IMAGE"
	MediaKindAudio MediaKind = "AUDIO"
)

var AllMediaKind = []MediaKind{
	MediaKindImage,
	MediaKindAudio,
}

func (e MediaKind) IsValid() bool {
	switch e {
	case MediaKindImage, MediaKindAudio:
		return true
	}
	return false
}

func (e MediaKind) String() string {
	return string(e)
}

func (e *MediaKind) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaKind", str)
	}
	return nil
}

func (e MediaKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MediaKind) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MediaKind) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderDirection) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderDirection) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type QuizOrderField string

const (
	QuizOrderFieldCreatedAt   QuizOrderField = "CREATED_AT"
	QuizOrderFieldTotalPoints QuizOrderField = "TOTAL_POINTS"
)

var AllQuizOrderField = []QuizOrderField{
	QuizOrderFieldCreatedAt,
	QuizOrderFieldTotalPoints,
}

func (e QuizOrderField) IsValid() bool {
	switch e {
	case QuizOrderFieldCreatedAt, QuizOrderFieldTotalPoints:
		return true
	}
	return false
}

func (e QuizOrderField) String() string {
	return string(e)
}

func (e *QuizOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuizOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuizOrderField", str)
	}
	return nil
}

func (e QuizOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *QuizOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e QuizOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type QuizQuestionOrderField string

const (
	QuizQuestionOrderFieldOrd    QuizQuestionOrderField = "ORD"
	QuizQuestionOrderFieldPoints QuizQuestionOrderField = "POINTS"
)

var AllQuizQuestionOrderField = []QuizQuestionOrderField{
	QuizQuestionOrderFieldOrd,
	QuizQuestionOrderFieldPoints,
}

func (e QuizQuestionOrderField) IsValid() bool {
	switch e {
	case QuizQuestionOrderFieldOrd, QuizQuestionOrderFieldPoints:
		return true
	}
	return false
}

func (e QuizQuestionOrderField) String() string {
	return string(e)
}

func (e *QuizQuestionOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuizQuestionOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuizQuestionOrderField", str)
	}
	return nil
}

func (e QuizQuestionOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *QuizQuestionOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e QuizQuestionOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
