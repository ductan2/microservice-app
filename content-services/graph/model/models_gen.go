// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type AddFlashcardInput struct {
	SetID        string   `json:"setId"`
	FrontText    string   `json:"frontText"`
	BackText     string   `json:"backText"`
	FrontMediaID *string  `json:"frontMediaId,omitempty"`
	BackMediaID  *string  `json:"backMediaId,omitempty"`
	Hints        []string `json:"hints,omitempty"`
}

type CreateFlashcardSetInput struct {
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
}

type CreateLessonInput struct {
	Code        *string `json:"code,omitempty"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
}

type CreateLessonSectionInput struct {
	Type LessonSectionType `json:"type"`
	Body map[string]any    `json:"body"`
}

type CreateLevelInput struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

type CreateQuizInput struct {
	LessonID    *string `json:"lessonId,omitempty"`
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	TimeLimitS  *int    `json:"timeLimitS,omitempty"`
}

type CreateQuizQuestionInput struct {
	Type        string         `json:"type"`
	Prompt      string         `json:"prompt"`
	PromptMedia *string        `json:"promptMedia,omitempty"`
	Points      *int           `json:"points,omitempty"`
	Metadata    map[string]any `json:"metadata,omitempty"`
}

type CreateTagInput struct {
	Slug string `json:"slug"`
	Name string `json:"name"`
}

type CreateTopicInput struct {
	Slug string `json:"slug"`
	Name string `json:"name"`
}

type Flashcard struct {
	ID           string    `json:"id"`
	SetID        string    `json:"setId"`
	FrontText    string    `json:"frontText"`
	BackText     string    `json:"backText"`
	FrontMediaID *string   `json:"frontMediaId,omitempty"`
	BackMediaID  *string   `json:"backMediaId,omitempty"`
	Ord          int       `json:"ord"`
	Hints        []string  `json:"hints,omitempty"`
	CreatedAt    time.Time `json:"createdAt"`
}

type FlashcardSet struct {
	ID          string       `json:"id"`
	Title       string       `json:"title"`
	Description *string      `json:"description,omitempty"`
	TopicID     *string      `json:"topicId,omitempty"`
	LevelID     *string      `json:"levelId,omitempty"`
	CreatedAt   time.Time    `json:"createdAt"`
	CreatedBy   *string      `json:"createdBy,omitempty"`
	Cards       []*Flashcard `json:"cards"`
}

type FlashcardSetList struct {
	Items      []*FlashcardSet `json:"items"`
	TotalCount int             `json:"totalCount"`
	Page       int             `json:"page"`
	PageSize   int             `json:"pageSize"`
}

type Lesson struct {
	ID          string           `json:"id"`
	Code        *string          `json:"code,omitempty"`
	Title       string           `json:"title"`
	Description *string          `json:"description,omitempty"`
	Topic       *Topic           `json:"topic,omitempty"`
	Level       *Level           `json:"level,omitempty"`
	IsPublished bool             `json:"isPublished"`
	Version     int              `json:"version"`
	CreatedBy   *string          `json:"createdBy,omitempty"`
	CreatedAt   time.Time        `json:"createdAt"`
	UpdatedAt   time.Time        `json:"updatedAt"`
	PublishedAt *time.Time       `json:"publishedAt,omitempty"`
	Sections    []*LessonSection `json:"sections"`
}

type LessonCollection struct {
	Items      []*Lesson `json:"items"`
	TotalCount int       `json:"totalCount"`
}

type LessonFilterInput struct {
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
	IsPublished *bool   `json:"isPublished,omitempty"`
	Search      *string `json:"search,omitempty"`
}

type LessonSection struct {
	ID        string            `json:"id"`
	LessonID  string            `json:"lessonId"`
	Ord       int               `json:"ord"`
	Type      LessonSectionType `json:"type"`
	Body      map[string]any    `json:"body"`
	CreatedAt time.Time         `json:"createdAt"`
}

type Level struct {
	ID   string `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

type MediaAsset struct {
	ID          string    `json:"id"`
	StorageKey  string    `json:"storageKey"`
	Kind        MediaKind `json:"kind"`
	MimeType    string    `json:"mimeType"`
	Bytes       int       `json:"bytes"`
	DurationMs  *int      `json:"durationMs,omitempty"`
	Sha256      string    `json:"sha256"`
	CreatedAt   time.Time `json:"createdAt"`
	UploadedBy  *string   `json:"uploadedBy,omitempty"`
	DownloadURL string    `json:"downloadURL"`
}

type Mutation struct {
}

type Query struct {
}

type Quiz struct {
	ID          string          `json:"id"`
	LessonID    *string         `json:"lessonId,omitempty"`
	Title       string          `json:"title"`
	Description *string         `json:"description,omitempty"`
	TotalPoints int             `json:"totalPoints"`
	TimeLimitS  *int            `json:"timeLimitS,omitempty"`
	CreatedAt   time.Time       `json:"createdAt"`
	Questions   []*QuizQuestion `json:"questions"`
}

type QuizListResult struct {
	Items      []*Quiz `json:"items"`
	TotalCount int     `json:"totalCount"`
}

type QuizQuestion struct {
	ID          string         `json:"id"`
	QuizID      string         `json:"quizId"`
	Ord         int            `json:"ord"`
	Type        string         `json:"type"`
	Prompt      string         `json:"prompt"`
	PromptMedia *string        `json:"promptMedia,omitempty"`
	Points      int            `json:"points"`
	Metadata    map[string]any `json:"metadata"`
}

type Tag struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
	Name string `json:"name"`
}

type Topic struct {
	ID        string    `json:"id"`
	Slug      string    `json:"slug"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
}

type UpdateLessonInput struct {
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	TopicID     *string `json:"topicId,omitempty"`
	LevelID     *string `json:"levelId,omitempty"`
}

type UpdateLessonSectionInput struct {
	Type *LessonSectionType `json:"type,omitempty"`
	Body map[string]any     `json:"body,omitempty"`
}

type UpdateLevelInput struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UpdateTagInput struct {
	Slug *string `json:"slug,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UpdateTopicInput struct {
	Slug *string `json:"slug,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UploadMediaInput struct {
	File       graphql.Upload `json:"file"`
	Kind       MediaKind      `json:"kind"`
	MimeType   string         `json:"mimeType"`
	Filename   *string        `json:"filename,omitempty"`
	UploadedBy *string        `json:"uploadedBy,omitempty"`
}

type LessonSectionType string

const (
	LessonSectionTypeText     LessonSectionType = "TEXT"
	LessonSectionTypeDialog   LessonSectionType = "DIALOG"
	LessonSectionTypeAudio    LessonSectionType = "AUDIO"
	LessonSectionTypeImage    LessonSectionType = "IMAGE"
	LessonSectionTypeExercise LessonSectionType = "EXERCISE"
)

var AllLessonSectionType = []LessonSectionType{
	LessonSectionTypeText,
	LessonSectionTypeDialog,
	LessonSectionTypeAudio,
	LessonSectionTypeImage,
	LessonSectionTypeExercise,
}

func (e LessonSectionType) IsValid() bool {
	switch e {
	case LessonSectionTypeText, LessonSectionTypeDialog, LessonSectionTypeAudio, LessonSectionTypeImage, LessonSectionTypeExercise:
		return true
	}
	return false
}

func (e LessonSectionType) String() string {
	return string(e)
}

func (e *LessonSectionType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LessonSectionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LessonSectionType", str)
	}
	return nil
}

func (e LessonSectionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *LessonSectionType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e LessonSectionType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type MediaKind string

const (
	MediaKindImage MediaKind = "IMAGE"
	MediaKindAudio MediaKind = "AUDIO"
)

var AllMediaKind = []MediaKind{
	MediaKindImage,
	MediaKindAudio,
}

func (e MediaKind) IsValid() bool {
	switch e {
	case MediaKindImage, MediaKindAudio:
		return true
	}
	return false
}

func (e MediaKind) String() string {
	return string(e)
}

func (e *MediaKind) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaKind", str)
	}
	return nil
}

func (e MediaKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MediaKind) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MediaKind) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
