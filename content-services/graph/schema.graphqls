schema {
  query: Query
  mutation: Mutation
}

type Query {
  health: String!

  topic(id: ID, slug: String): Topic
  topics(search: String): [Topic!]!

  level(id: ID, code: String): Level
  levels(search: String): [Level!]!

  tag(id: ID, slug: String): Tag
  tags(search: String): [Tag!]!

  mediaAsset(id: ID!): MediaAsset
  mediaAssets(ids: [ID!]!): [MediaAsset!]!
  mediaAssetCollection(filter: MediaAssetFilterInput, page: Int, pageSize: Int, orderBy: MediaAssetOrderInput): MediaAssetCollection!

  lesson(id: ID!): Lesson
  lessonByCode(code: String!): Lesson

  quiz(id: ID!): Quiz
  quizzes(lessonId: ID, search: String, page: Int = 1, pageSize: Int = 20, orderBy: QuizOrderInput): QuizCollection!
  quizQuestions(quizId: ID!, filter: QuizQuestionFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: QuizQuestionOrderInput): QuizQuestionCollection!
  flashcardSet(id: ID!): FlashcardSet
  flashcardSets(filter: FlashcardSetFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: FlashcardSetOrderInput): FlashcardSetList!
  flashcards(setId: ID!, filter: FlashcardFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: FlashcardOrderInput): FlashcardCollection!
  lessons(filter: LessonFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: LessonOrderInput): LessonCollection!

  lessonSections(lessonId: ID!, filter: LessonSectionFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: LessonSectionOrderInput): LessonSectionCollection!
}

type Mutation {
  createTopic(input: CreateTopicInput!): Topic!
  updateTopic(id: ID!, input: UpdateTopicInput!): Topic!
  deleteTopic(id: ID!): Boolean!

  createLevel(input: CreateLevelInput!): Level!
  updateLevel(id: ID!, input: UpdateLevelInput!): Level!
  deleteLevel(id: ID!): Boolean!

  createTag(input: CreateTagInput!): Tag!
  updateTag(id: ID!, input: UpdateTagInput!): Tag!
  deleteTag(id: ID!): Boolean!

  uploadMedia(input: UploadMediaInput!): MediaAsset!
  deleteMedia(id: ID!): Boolean!

  createLesson(input: CreateLessonInput!): Lesson!
  updateLesson(id: ID!, input: UpdateLessonInput!): Lesson!
  publishLesson(id: ID!): Lesson!
  unpublishLesson(id: ID!): Lesson!

  createLessonSection(lessonId: ID!, input: CreateLessonSectionInput!): LessonSection!
  updateLessonSection(id: ID!, input: UpdateLessonSectionInput!): LessonSection!
  deleteLessonSection(id: ID!): Boolean!

  createFlashcardSet(input: CreateFlashcardSetInput!): FlashcardSet!
  addFlashcard(input: AddFlashcardInput!): Flashcard!

  createQuiz(input: CreateQuizInput!): Quiz!
  addQuizQuestion(quizId: ID!, input: CreateQuizQuestionInput!): QuizQuestion!
  addQuestionOption(questionId: ID!, input: CreateQuestionOptionInput!): QuestionOption!
  updateQuestionOption(id: ID!, input: UpdateQuestionOptionInput!): QuestionOption!
  deleteQuestionOption(id: ID!): Boolean!

  addContentTag(input: ContentTagInput!): ContentTag!
  removeContentTag(input: ContentTagInput!): Boolean!

}

type Topic {
  id: ID!
  slug: String!
  name: String!
  createdAt: Time!
}

input CreateTopicInput {
  slug: String!
  name: String!
}

input UpdateTopicInput {
  slug: String
  name: String
}

type Level {
  id: ID!
  code: String!
  name: String!
}

input CreateLevelInput {
  code: String!
  name: String!
}

input UpdateLevelInput {
  code: String
  name: String
}

type Tag {
  id: ID!
  slug: String!
  name: String!
}

input CreateTagInput {
  slug: String!
  name: String!
}

input UpdateTagInput {
  slug: String
  name: String
}

enum MediaKind {
  IMAGE
  AUDIO
}

type MediaAsset {
  id: ID!
  storageKey: String!
  kind: MediaKind!
  mimeType: String!
  folderId: ID
  originalName: String!
  thumbnailURL: String
  bytes: Int!
  durationMs: Int
  sha256: String!
  createdAt: Time!
  uploadedBy: ID
  downloadURL: String!
}

input MediaAssetFilterInput {
  folderId: ID
  kind: MediaKind
  uploadedBy: ID
  sha256: String
  search: String
}

enum MediaAssetOrderField {
  CREATED_AT
  BYTES
}

input MediaAssetOrderInput {
  field: MediaAssetOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

type MediaAssetCollection {
  items: [MediaAsset!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input UploadMediaInput {
  file: Upload!
  kind: MediaKind!
  mimeType: String!
  filename: String
  uploadedBy: ID
  folderId: ID
}


type Lesson {
  id: ID!
  code: String
  title: String!
  description: String
  topic: Topic
  level: Level
  isPublished: Boolean!
  version: Int!
  createdBy: ID
  createdAt: Time!
  updatedAt: Time!
  publishedAt: Time
  tags: [Tag!]!
  sections: [LessonSection!]!
}

input CreateLessonInput {
  code: String
  title: String!
  description: String
  topicId: ID
  levelId: ID
  createdBy: ID
}

type Quiz {
  id: ID!
  lessonId: ID
  title: String!
  description: String
  totalPoints: Int!
  timeLimitS: Int
  createdAt: Time!
  tags: [Tag!]!
  questions: [QuizQuestion!]!
}

type QuizQuestion {
  id: ID!
  quizId: ID!
  ord: Int!
  type: String!
  prompt: String!
  promptMedia: ID
  points: Int!
  metadata: JSON!
  options: [QuestionOption!]!
}

enum QuizOrderField {
  CREATED_AT
  TOTAL_POINTS
}

input QuizOrderInput {
  field: QuizOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

type QuizCollection {
  items: [Quiz!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input QuizQuestionFilterInput {
  type: String
}

enum QuizQuestionOrderField {
  ORD
  POINTS
}

input QuizQuestionOrderInput {
  field: QuizQuestionOrderField! = ORD
  direction: OrderDirection! = ASC
}

type QuizQuestionCollection {
  items: [QuizQuestion!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input CreateQuizInput {
  lessonId: ID
  title: String!
  description: String
  timeLimitS: Int
}

input CreateQuizQuestionInput {
  type: String!
  prompt: String!
  promptMedia: ID
  points: Int = 1
  metadata: JSON
}

input CreateQuestionOptionInput {
  ord: Int!
  label: String!
  isCorrect: Boolean!
  feedback: String
}

input UpdateQuestionOptionInput {
  ord: Int
  label: String
  isCorrect: Boolean
  feedback: String
}
input UpdateLessonInput {
  title: String
  description: String
  topicId: ID
  levelId: ID
}

input LessonFilterInput {
  topicId: ID
  levelId: ID
  isPublished: Boolean
  search: String
  createdBy: ID
}

enum LessonOrderField {
  CREATED_AT
  PUBLISHED_AT
  VERSION
}

input LessonOrderInput {
  field: LessonOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

type LessonCollection {
  items: [Lesson!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

type LessonSection {
  id: ID!
  lessonId: ID!
  ord: Int!
  type: LessonSectionType!
  body: Map!
  createdAt: Time!
}

input LessonSectionFilterInput {
  type: LessonSectionType
}

enum LessonSectionOrderField {
  ORD
  CREATED_AT
}

input LessonSectionOrderInput {
  field: LessonSectionOrderField! = ORD
  direction: OrderDirection! = ASC
}

type LessonSectionCollection {
  items: [LessonSection!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

enum LessonSectionType {
  TEXT
  DIALOG
  AUDIO
  IMAGE
  EXERCISE
}

input CreateLessonSectionInput {
  type: LessonSectionType!
  body: Map!
}

input UpdateLessonSectionInput {
  type: LessonSectionType
  body: Map
}

scalar Time
scalar Upload
scalar JSON
scalar Map

enum OrderDirection {
  ASC
  DESC
}

type QuestionOption {
  id: ID!
  questionId: ID!
  ord: Int!
  label: String!
  isCorrect: Boolean!
  feedback: String
}

enum ContentTagKind {
  LESSON
  QUIZ
  FLASHCARD_SET
}

input ContentTagInput {
  tagId: ID!
  kind: ContentTagKind!
  objectId: ID!
}

type ContentTag {
  tagId: ID!
  kind: ContentTagKind!
  objectId: ID!
  tag: Tag
}

type FlashcardSet {
  id: ID!
  title: String!
  description: String
  topicId: ID
  levelId: ID
  createdAt: Time!
  createdBy: ID
  tags: [Tag!]!
  cards: [Flashcard!]!
}

type Flashcard {
  id: ID!
  setId: ID!
  frontText: String!
  backText: String!
  frontMediaId: ID
  backMediaId: ID
  ord: Int!
  hints: [String!]
  createdAt: Time!
}

input FlashcardSetFilterInput {
  topicId: ID
  levelId: ID
  createdBy: ID
  search: String
}

enum FlashcardSetOrderField {
  CREATED_AT
  CARD_COUNT
}

input FlashcardSetOrderInput {
  field: FlashcardSetOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

type FlashcardSetList {
  items: [FlashcardSet!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input FlashcardFilterInput {
  hasMedia: Boolean
}

enum FlashcardOrderField {
  ORD
  CREATED_AT
}

input FlashcardOrderInput {
  field: FlashcardOrderField! = ORD
  direction: OrderDirection! = ASC
}

type FlashcardCollection {
  items: [Flashcard!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input CreateFlashcardSetInput {
  title: String!
  description: String
  topicId: ID
  levelId: ID
  createdBy: ID
}

input AddFlashcardInput {
  setId: ID!
  frontText: String!
  backText: String!
  frontMediaId: ID
  backMediaId: ID
  hints: [String!]
}


