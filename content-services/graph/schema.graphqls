schema {
  query: Query
  mutation: Mutation
}

type Query {
  health: String!

  topic(id: ID, slug: String): Topic
  topics: [Topic!]!

  level(id: ID, code: String): Level
  levels: [Level!]!

  tag(id: ID, slug: String): Tag
  tags: [Tag!]!

  mediaAsset(id: ID!): MediaAsset
  mediaAssets(ids: [ID!]!): [MediaAsset!]!

  lesson(id: ID!): Lesson
  lessonByCode(code: String!): Lesson
  lessons(filter: LessonFilterInput, page: Int, pageSize: Int): LessonCollection!

  lessonSections(lessonId: ID!): [LessonSection!]!
}

type Mutation {
  createTopic(input: CreateTopicInput!): Topic!
  updateTopic(id: ID!, input: UpdateTopicInput!): Topic!
  deleteTopic(id: ID!): Boolean!

  createLevel(input: CreateLevelInput!): Level!
  updateLevel(id: ID!, input: UpdateLevelInput!): Level!
  deleteLevel(id: ID!): Boolean!

  createTag(input: CreateTagInput!): Tag!
  updateTag(id: ID!, input: UpdateTagInput!): Tag!
  deleteTag(id: ID!): Boolean!

  uploadMedia(input: UploadMediaInput!): MediaAsset!
  deleteMedia(id: ID!): Boolean!

  createLesson(input: CreateLessonInput!): Lesson!
  updateLesson(id: ID!, input: UpdateLessonInput!): Lesson!
  publishLesson(id: ID!): Lesson!
  unpublishLesson(id: ID!): Lesson!

  createLessonSection(lessonId: ID!, input: CreateLessonSectionInput!): LessonSection!
  updateLessonSection(id: ID!, input: UpdateLessonSectionInput!): LessonSection!
  deleteLessonSection(id: ID!): Boolean!

}

type Topic {
  id: ID!
  slug: String!
  name: String!
  createdAt: Time!
}

input CreateTopicInput {
  slug: String!
  name: String!
}

input UpdateTopicInput {
  slug: String
  name: String
}

type Level {
  id: ID!
  code: String!
  name: String!
}

input CreateLevelInput {
  code: String!
  name: String!
}

input UpdateLevelInput {
  code: String
  name: String
}

type Tag {
  id: ID!
  slug: String!
  name: String!
}

input CreateTagInput {
  slug: String!
  name: String!
}

input UpdateTagInput {
  slug: String
  name: String
}

enum MediaKind {
  IMAGE
  AUDIO
}

type MediaAsset {
  id: ID!
  storageKey: String!
  kind: MediaKind!
  mimeType: String!
  bytes: Int!
  durationMs: Int
  sha256: String!
  createdAt: Time!
  uploadedBy: ID
  downloadURL: String!
}

input UploadMediaInput {
  file: Upload!
  kind: MediaKind!
  mimeType: String!
  filename: String
  uploadedBy: ID
}


type Lesson {
  id: ID!
  code: String
  title: String!
  description: String
  topic: Topic
  level: Level
  isPublished: Boolean!
  version: Int!
  createdBy: ID
  createdAt: Time!
  updatedAt: Time!
  publishedAt: Time
  sections: [LessonSection!]!
}

input CreateLessonInput {
  code: String
  title: String!
  description: String
  topicId: ID
  levelId: ID
  createdBy: ID
}

input UpdateLessonInput {
  title: String
  description: String
  topicId: ID
  levelId: ID
}

input LessonFilterInput {
  topicId: ID
  levelId: ID
  isPublished: Boolean
  search: String
}

type LessonCollection {
  items: [Lesson!]!
  totalCount: Int!
}

type LessonSection {
  id: ID!
  lessonId: ID!
  ord: Int!
  type: LessonSectionType!
  body: Map!
  createdAt: Time!
}

enum LessonSectionType {
  TEXT
  DIALOG
  AUDIO
  IMAGE
  EXERCISE
}

input CreateLessonSectionInput {
  type: LessonSectionType!
  body: Map!
}

input UpdateLessonSectionInput {
  type: LessonSectionType
  body: Map
}

scalar Time
scalar Upload
scalar Map


