package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"content-services/graph/generated"
	"content-services/graph/model"
	"context"
	"time"

	"go.mongodb.org/mongo-driver/bson"
)

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (string, error) {
	return "ok", nil
}

// LessonByCode is the resolver for the lessonByCode field.
func (r *queryResolver) LessonByCode(ctx context.Context, code string) (*model.Lesson, error) {
	if r.DB == nil {
		return nil, nil
	}
	col := r.DB.Collection("lessons")
	var doc struct {
		ID          string    `bson:"id"`
		Code        *string   `bson:"code"`
		Title       string    `bson:"title"`
		Description *string   `bson:"description"`
		IsPublished bool      `bson:"is_published"`
		Version     int       `bson:"version"`
		CreatedAt   time.Time `bson:"created_at"`
		UpdatedAt   time.Time `bson:"updated_at"`
	}
	err := col.FindOne(ctx, bson.M{"code": code}).Decode(&doc)
	if err != nil {
		return nil, nil
	}
	return &model.Lesson{
		ID:          doc.ID,
		Code:        doc.Code,
		Title:       doc.Title,
		Description: doc.Description,
		IsPublished: doc.IsPublished,
		Version:     doc.Version,
		CreatedAt:   doc.CreatedAt,
		UpdatedAt:   doc.UpdatedAt,
	}, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
