// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"content-services/graph/model"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	FlashcardSet() FlashcardSetResolver
	Folder() FolderResolver
	Lesson() LessonResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Quiz() QuizResolver
	QuizQuestion() QuizQuestionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ContentTag struct {
		Kind     func(childComplexity int) int
		ObjectID func(childComplexity int) int
		Tag      func(childComplexity int) int
		TagID    func(childComplexity int) int
	}

	Flashcard struct {
		BackMediaID  func(childComplexity int) int
		BackText     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		FrontMediaID func(childComplexity int) int
		FrontText    func(childComplexity int) int
		Hints        func(childComplexity int) int
		ID           func(childComplexity int) int
		Ord          func(childComplexity int) int
		SetID        func(childComplexity int) int
	}

	FlashcardCollection struct {
		Items      func(childComplexity int) int
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FlashcardSet struct {
		Cards       func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		LevelID     func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		TopicID     func(childComplexity int) int
	}

	FlashcardSetList struct {
		Items      func(childComplexity int) int
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Folder struct {
		Children      func(childComplexity int) int
		ChildrenCount func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Depth         func(childComplexity int) int
		ID            func(childComplexity int) int
		MediaCount    func(childComplexity int) int
		Name          func(childComplexity int) int
		Parent        func(childComplexity int) int
		ParentID      func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	FolderCollection struct {
		Items      func(childComplexity int) int
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FolderTree struct {
		Children func(childComplexity int) int
		Folder   func(childComplexity int) int
	}

	Lesson struct {
		Code        func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		IsPublished func(childComplexity int) int
		Level       func(childComplexity int) int
		PublishedAt func(childComplexity int) int
		Sections    func(childComplexity int) int
		Tags        func(childComplexity int) int
		Title       func(childComplexity int) int
		Topic       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	LessonCollection struct {
		Items      func(childComplexity int) int
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LessonSection struct {
		Body      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		LessonID  func(childComplexity int) int
		Ord       func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	LessonSectionCollection struct {
		Items      func(childComplexity int) int
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Level struct {
		Code func(childComplexity int) int
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	MediaAsset struct {
		Bytes        func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DownloadURL  func(childComplexity int) int
		DurationMs   func(childComplexity int) int
		FolderID     func(childComplexity int) int
		ID           func(childComplexity int) int
		Kind         func(childComplexity int) int
		MimeType     func(childComplexity int) int
		OriginalName func(childComplexity int) int
		Sha256       func(childComplexity int) int
		StorageKey   func(childComplexity int) int
		ThumbnailURL func(childComplexity int) int
		UploadedBy   func(childComplexity int) int
	}

	MediaAssetCollection struct {
		Items      func(childComplexity int) int
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Mutation struct {
		AddContentTag        func(childComplexity int, input model.ContentTagInput) int
		AddFlashcard         func(childComplexity int, input model.AddFlashcardInput) int
		AddQuestionOption    func(childComplexity int, questionID string, input model.CreateQuestionOptionInput) int
		AddQuizQuestion      func(childComplexity int, quizID string, input model.CreateQuizQuestionInput) int
		CreateFlashcardSet   func(childComplexity int, input model.CreateFlashcardSetInput) int
		CreateFolder         func(childComplexity int, input model.CreateFolderInput) int
		CreateLesson         func(childComplexity int, input model.CreateLessonInput) int
		CreateLessonSection  func(childComplexity int, lessonID string, input model.CreateLessonSectionInput) int
		CreateLevel          func(childComplexity int, input model.CreateLevelInput) int
		CreateQuiz           func(childComplexity int, input model.CreateQuizInput) int
		CreateTag            func(childComplexity int, input model.CreateTagInput) int
		CreateTopic          func(childComplexity int, input model.CreateTopicInput) int
		DeleteFolder         func(childComplexity int, id string) int
		DeleteLesson         func(childComplexity int, id string) int
		DeleteLessonSection  func(childComplexity int, id string) int
		DeleteLevel          func(childComplexity int, id string) int
		DeleteMedia          func(childComplexity int, id string) int
		DeleteQuestionOption func(childComplexity int, id string) int
		DeleteQuiz           func(childComplexity int, id string) int
		DeleteTag            func(childComplexity int, id string) int
		DeleteTopic          func(childComplexity int, id string) int
		PublishLesson        func(childComplexity int, id string) int
		RemoveContentTag     func(childComplexity int, input model.ContentTagInput) int
		UnpublishLesson      func(childComplexity int, id string) int
		UpdateFolder         func(childComplexity int, id string, input model.UpdateFolderInput) int
		UpdateLesson         func(childComplexity int, id string, input model.UpdateLessonInput) int
		UpdateLessonSection  func(childComplexity int, id string, input model.UpdateLessonSectionInput) int
		UpdateLevel          func(childComplexity int, id string, input model.UpdateLevelInput) int
		UpdateQuestionOption func(childComplexity int, id string, input model.UpdateQuestionOptionInput) int
		UpdateQuiz           func(childComplexity int, id string, input model.UpdateQuizInput) int
		UpdateTag            func(childComplexity int, id string, input model.UpdateTagInput) int
		UpdateTopic          func(childComplexity int, id string, input model.UpdateTopicInput) int
		UploadMedia          func(childComplexity int, input model.UploadMediaInput) int
	}

	Query struct {
		FlashcardSet         func(childComplexity int, id string) int
		FlashcardSets        func(childComplexity int, filter *model.FlashcardSetFilterInput, page *int, pageSize *int, orderBy *model.FlashcardSetOrderInput) int
		Flashcards           func(childComplexity int, setID string, filter *model.FlashcardFilterInput, page *int, pageSize *int, orderBy *model.FlashcardOrderInput) int
		Folder               func(childComplexity int, id string) int
		FolderPath           func(childComplexity int, id string) int
		FolderTree           func(childComplexity int, id string) int
		Folders              func(childComplexity int, filter *model.FolderFilterInput, page *int, pageSize *int, orderBy *model.FolderOrderInput) int
		Health               func(childComplexity int) int
		Lesson               func(childComplexity int, id string) int
		LessonByCode         func(childComplexity int, code string) int
		LessonSections       func(childComplexity int, lessonID string, filter *model.LessonSectionFilterInput, page *int, pageSize *int, orderBy *model.LessonSectionOrderInput) int
		Lessons              func(childComplexity int, filter *model.LessonFilterInput, page *int, pageSize *int, orderBy *model.LessonOrderInput) int
		Level                func(childComplexity int, id *string, code *string) int
		Levels               func(childComplexity int, search *string) int
		MediaAsset           func(childComplexity int, id string) int
		MediaAssetCollection func(childComplexity int, filter *model.MediaAssetFilterInput, page *int, pageSize *int, orderBy *model.MediaAssetOrderInput) int
		MediaAssets          func(childComplexity int, ids []string) int
		Quiz                 func(childComplexity int, id string) int
		QuizQuestions        func(childComplexity int, quizID string, filter *model.QuizQuestionFilterInput, page *int, pageSize *int, orderBy *model.QuizQuestionOrderInput) int
		Quizzes              func(childComplexity int, lessonID *string, topicID *string, levelID *string, search *string, page *int, pageSize *int, orderBy *model.QuizOrderInput) int
		RootFolders          func(childComplexity int) int
		Tag                  func(childComplexity int, id *string, slug *string) int
		Tags                 func(childComplexity int, search *string) int
		Topic                func(childComplexity int, id *string, slug *string) int
		Topics               func(childComplexity int, search *string) int
	}

	QuestionOption struct {
		Feedback   func(childComplexity int) int
		ID         func(childComplexity int) int
		IsCorrect  func(childComplexity int) int
		Label      func(childComplexity int) int
		Ord        func(childComplexity int) int
		QuestionID func(childComplexity int) int
	}

	Quiz struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		LessonID    func(childComplexity int) int
		Level       func(childComplexity int) int
		Questions   func(childComplexity int) int
		Tags        func(childComplexity int) int
		TimeLimitS  func(childComplexity int) int
		Title       func(childComplexity int) int
		Topic       func(childComplexity int) int
		TotalPoints func(childComplexity int) int
	}

	QuizCollection struct {
		Items      func(childComplexity int) int
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	QuizQuestion struct {
		ID          func(childComplexity int) int
		Metadata    func(childComplexity int) int
		Options     func(childComplexity int) int
		Ord         func(childComplexity int) int
		Points      func(childComplexity int) int
		Prompt      func(childComplexity int) int
		PromptMedia func(childComplexity int) int
		QuizID      func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	QuizQuestionCollection struct {
		Items      func(childComplexity int) int
		Page       func(childComplexity int) int
		PageSize   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Tag struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
		Slug func(childComplexity int) int
	}

	Topic struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Slug      func(childComplexity int) int
	}
}

type FlashcardSetResolver interface {
	Tags(ctx context.Context, obj *model.FlashcardSet) ([]*model.Tag, error)
	Cards(ctx context.Context, obj *model.FlashcardSet) ([]*model.Flashcard, error)
}
type FolderResolver interface {
	Parent(ctx context.Context, obj *model.Folder) (*model.Folder, error)

	Children(ctx context.Context, obj *model.Folder) ([]*model.Folder, error)
	ChildrenCount(ctx context.Context, obj *model.Folder) (int, error)
	MediaCount(ctx context.Context, obj *model.Folder) (int, error)
}
type LessonResolver interface {
	Topic(ctx context.Context, obj *model.Lesson) (*model.Topic, error)
	Level(ctx context.Context, obj *model.Lesson) (*model.Level, error)

	Tags(ctx context.Context, obj *model.Lesson) ([]*model.Tag, error)
}
type MutationResolver interface {
	CreateTopic(ctx context.Context, input model.CreateTopicInput) (*model.Topic, error)
	UpdateTopic(ctx context.Context, id string, input model.UpdateTopicInput) (*model.Topic, error)
	DeleteTopic(ctx context.Context, id string) (bool, error)
	CreateLevel(ctx context.Context, input model.CreateLevelInput) (*model.Level, error)
	UpdateLevel(ctx context.Context, id string, input model.UpdateLevelInput) (*model.Level, error)
	DeleteLevel(ctx context.Context, id string) (bool, error)
	CreateTag(ctx context.Context, input model.CreateTagInput) (*model.Tag, error)
	UpdateTag(ctx context.Context, id string, input model.UpdateTagInput) (*model.Tag, error)
	DeleteTag(ctx context.Context, id string) (bool, error)
	CreateFolder(ctx context.Context, input model.CreateFolderInput) (*model.Folder, error)
	UpdateFolder(ctx context.Context, id string, input model.UpdateFolderInput) (*model.Folder, error)
	DeleteFolder(ctx context.Context, id string) (bool, error)
	UploadMedia(ctx context.Context, input model.UploadMediaInput) (*model.MediaAsset, error)
	DeleteMedia(ctx context.Context, id string) (bool, error)
	CreateLesson(ctx context.Context, input model.CreateLessonInput) (*model.Lesson, error)
	UpdateLesson(ctx context.Context, id string, input model.UpdateLessonInput) (*model.Lesson, error)
	DeleteLesson(ctx context.Context, id string) (bool, error)
	PublishLesson(ctx context.Context, id string) (*model.Lesson, error)
	UnpublishLesson(ctx context.Context, id string) (*model.Lesson, error)
	CreateLessonSection(ctx context.Context, lessonID string, input model.CreateLessonSectionInput) (*model.LessonSection, error)
	UpdateLessonSection(ctx context.Context, id string, input model.UpdateLessonSectionInput) (*model.LessonSection, error)
	DeleteLessonSection(ctx context.Context, id string) (bool, error)
	CreateFlashcardSet(ctx context.Context, input model.CreateFlashcardSetInput) (*model.FlashcardSet, error)
	AddFlashcard(ctx context.Context, input model.AddFlashcardInput) (*model.Flashcard, error)
	CreateQuiz(ctx context.Context, input model.CreateQuizInput) (*model.Quiz, error)
	UpdateQuiz(ctx context.Context, id string, input model.UpdateQuizInput) (*model.Quiz, error)
	DeleteQuiz(ctx context.Context, id string) (bool, error)
	AddQuizQuestion(ctx context.Context, quizID string, input model.CreateQuizQuestionInput) (*model.QuizQuestion, error)
	AddQuestionOption(ctx context.Context, questionID string, input model.CreateQuestionOptionInput) (*model.QuestionOption, error)
	UpdateQuestionOption(ctx context.Context, id string, input model.UpdateQuestionOptionInput) (*model.QuestionOption, error)
	DeleteQuestionOption(ctx context.Context, id string) (bool, error)
	AddContentTag(ctx context.Context, input model.ContentTagInput) (*model.ContentTag, error)
	RemoveContentTag(ctx context.Context, input model.ContentTagInput) (bool, error)
}
type QueryResolver interface {
	Health(ctx context.Context) (string, error)
	Topic(ctx context.Context, id *string, slug *string) (*model.Topic, error)
	Topics(ctx context.Context, search *string) ([]*model.Topic, error)
	Level(ctx context.Context, id *string, code *string) (*model.Level, error)
	Levels(ctx context.Context, search *string) ([]*model.Level, error)
	Tag(ctx context.Context, id *string, slug *string) (*model.Tag, error)
	Tags(ctx context.Context, search *string) ([]*model.Tag, error)
	Folder(ctx context.Context, id string) (*model.Folder, error)
	Folders(ctx context.Context, filter *model.FolderFilterInput, page *int, pageSize *int, orderBy *model.FolderOrderInput) (*model.FolderCollection, error)
	RootFolders(ctx context.Context) ([]*model.Folder, error)
	FolderTree(ctx context.Context, id string) (*model.FolderTree, error)
	FolderPath(ctx context.Context, id string) ([]*model.Folder, error)
	MediaAsset(ctx context.Context, id string) (*model.MediaAsset, error)
	MediaAssets(ctx context.Context, ids []string) ([]*model.MediaAsset, error)
	MediaAssetCollection(ctx context.Context, filter *model.MediaAssetFilterInput, page *int, pageSize *int, orderBy *model.MediaAssetOrderInput) (*model.MediaAssetCollection, error)
	Lesson(ctx context.Context, id string) (*model.Lesson, error)
	LessonByCode(ctx context.Context, code string) (*model.Lesson, error)
	Quiz(ctx context.Context, id string) (*model.Quiz, error)
	Quizzes(ctx context.Context, lessonID *string, topicID *string, levelID *string, search *string, page *int, pageSize *int, orderBy *model.QuizOrderInput) (*model.QuizCollection, error)
	QuizQuestions(ctx context.Context, quizID string, filter *model.QuizQuestionFilterInput, page *int, pageSize *int, orderBy *model.QuizQuestionOrderInput) (*model.QuizQuestionCollection, error)
	FlashcardSet(ctx context.Context, id string) (*model.FlashcardSet, error)
	FlashcardSets(ctx context.Context, filter *model.FlashcardSetFilterInput, page *int, pageSize *int, orderBy *model.FlashcardSetOrderInput) (*model.FlashcardSetList, error)
	Flashcards(ctx context.Context, setID string, filter *model.FlashcardFilterInput, page *int, pageSize *int, orderBy *model.FlashcardOrderInput) (*model.FlashcardCollection, error)
	Lessons(ctx context.Context, filter *model.LessonFilterInput, page *int, pageSize *int, orderBy *model.LessonOrderInput) (*model.LessonCollection, error)
	LessonSections(ctx context.Context, lessonID string, filter *model.LessonSectionFilterInput, page *int, pageSize *int, orderBy *model.LessonSectionOrderInput) (*model.LessonSectionCollection, error)
}
type QuizResolver interface {
	Tags(ctx context.Context, obj *model.Quiz) ([]*model.Tag, error)
	Questions(ctx context.Context, obj *model.Quiz) ([]*model.QuizQuestion, error)
}
type QuizQuestionResolver interface {
	Options(ctx context.Context, obj *model.QuizQuestion) ([]*model.QuestionOption, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ContentTag.kind":
		if e.complexity.ContentTag.Kind == nil {
			break
		}

		return e.complexity.ContentTag.Kind(childComplexity), true
	case "ContentTag.objectId":
		if e.complexity.ContentTag.ObjectID == nil {
			break
		}

		return e.complexity.ContentTag.ObjectID(childComplexity), true
	case "ContentTag.tag":
		if e.complexity.ContentTag.Tag == nil {
			break
		}

		return e.complexity.ContentTag.Tag(childComplexity), true
	case "ContentTag.tagId":
		if e.complexity.ContentTag.TagID == nil {
			break
		}

		return e.complexity.ContentTag.TagID(childComplexity), true

	case "Flashcard.backMediaId":
		if e.complexity.Flashcard.BackMediaID == nil {
			break
		}

		return e.complexity.Flashcard.BackMediaID(childComplexity), true
	case "Flashcard.backText":
		if e.complexity.Flashcard.BackText == nil {
			break
		}

		return e.complexity.Flashcard.BackText(childComplexity), true
	case "Flashcard.createdAt":
		if e.complexity.Flashcard.CreatedAt == nil {
			break
		}

		return e.complexity.Flashcard.CreatedAt(childComplexity), true
	case "Flashcard.frontMediaId":
		if e.complexity.Flashcard.FrontMediaID == nil {
			break
		}

		return e.complexity.Flashcard.FrontMediaID(childComplexity), true
	case "Flashcard.frontText":
		if e.complexity.Flashcard.FrontText == nil {
			break
		}

		return e.complexity.Flashcard.FrontText(childComplexity), true
	case "Flashcard.hints":
		if e.complexity.Flashcard.Hints == nil {
			break
		}

		return e.complexity.Flashcard.Hints(childComplexity), true
	case "Flashcard.id":
		if e.complexity.Flashcard.ID == nil {
			break
		}

		return e.complexity.Flashcard.ID(childComplexity), true
	case "Flashcard.ord":
		if e.complexity.Flashcard.Ord == nil {
			break
		}

		return e.complexity.Flashcard.Ord(childComplexity), true
	case "Flashcard.setId":
		if e.complexity.Flashcard.SetID == nil {
			break
		}

		return e.complexity.Flashcard.SetID(childComplexity), true

	case "FlashcardCollection.items":
		if e.complexity.FlashcardCollection.Items == nil {
			break
		}

		return e.complexity.FlashcardCollection.Items(childComplexity), true
	case "FlashcardCollection.page":
		if e.complexity.FlashcardCollection.Page == nil {
			break
		}

		return e.complexity.FlashcardCollection.Page(childComplexity), true
	case "FlashcardCollection.pageSize":
		if e.complexity.FlashcardCollection.PageSize == nil {
			break
		}

		return e.complexity.FlashcardCollection.PageSize(childComplexity), true
	case "FlashcardCollection.totalCount":
		if e.complexity.FlashcardCollection.TotalCount == nil {
			break
		}

		return e.complexity.FlashcardCollection.TotalCount(childComplexity), true

	case "FlashcardSet.cards":
		if e.complexity.FlashcardSet.Cards == nil {
			break
		}

		return e.complexity.FlashcardSet.Cards(childComplexity), true
	case "FlashcardSet.createdAt":
		if e.complexity.FlashcardSet.CreatedAt == nil {
			break
		}

		return e.complexity.FlashcardSet.CreatedAt(childComplexity), true
	case "FlashcardSet.createdBy":
		if e.complexity.FlashcardSet.CreatedBy == nil {
			break
		}

		return e.complexity.FlashcardSet.CreatedBy(childComplexity), true
	case "FlashcardSet.description":
		if e.complexity.FlashcardSet.Description == nil {
			break
		}

		return e.complexity.FlashcardSet.Description(childComplexity), true
	case "FlashcardSet.id":
		if e.complexity.FlashcardSet.ID == nil {
			break
		}

		return e.complexity.FlashcardSet.ID(childComplexity), true
	case "FlashcardSet.levelId":
		if e.complexity.FlashcardSet.LevelID == nil {
			break
		}

		return e.complexity.FlashcardSet.LevelID(childComplexity), true
	case "FlashcardSet.tags":
		if e.complexity.FlashcardSet.Tags == nil {
			break
		}

		return e.complexity.FlashcardSet.Tags(childComplexity), true
	case "FlashcardSet.title":
		if e.complexity.FlashcardSet.Title == nil {
			break
		}

		return e.complexity.FlashcardSet.Title(childComplexity), true
	case "FlashcardSet.topicId":
		if e.complexity.FlashcardSet.TopicID == nil {
			break
		}

		return e.complexity.FlashcardSet.TopicID(childComplexity), true

	case "FlashcardSetList.items":
		if e.complexity.FlashcardSetList.Items == nil {
			break
		}

		return e.complexity.FlashcardSetList.Items(childComplexity), true
	case "FlashcardSetList.page":
		if e.complexity.FlashcardSetList.Page == nil {
			break
		}

		return e.complexity.FlashcardSetList.Page(childComplexity), true
	case "FlashcardSetList.pageSize":
		if e.complexity.FlashcardSetList.PageSize == nil {
			break
		}

		return e.complexity.FlashcardSetList.PageSize(childComplexity), true
	case "FlashcardSetList.totalCount":
		if e.complexity.FlashcardSetList.TotalCount == nil {
			break
		}

		return e.complexity.FlashcardSetList.TotalCount(childComplexity), true

	case "Folder.children":
		if e.complexity.Folder.Children == nil {
			break
		}

		return e.complexity.Folder.Children(childComplexity), true
	case "Folder.childrenCount":
		if e.complexity.Folder.ChildrenCount == nil {
			break
		}

		return e.complexity.Folder.ChildrenCount(childComplexity), true
	case "Folder.createdAt":
		if e.complexity.Folder.CreatedAt == nil {
			break
		}

		return e.complexity.Folder.CreatedAt(childComplexity), true
	case "Folder.depth":
		if e.complexity.Folder.Depth == nil {
			break
		}

		return e.complexity.Folder.Depth(childComplexity), true
	case "Folder.id":
		if e.complexity.Folder.ID == nil {
			break
		}

		return e.complexity.Folder.ID(childComplexity), true
	case "Folder.mediaCount":
		if e.complexity.Folder.MediaCount == nil {
			break
		}

		return e.complexity.Folder.MediaCount(childComplexity), true
	case "Folder.name":
		if e.complexity.Folder.Name == nil {
			break
		}

		return e.complexity.Folder.Name(childComplexity), true
	case "Folder.parent":
		if e.complexity.Folder.Parent == nil {
			break
		}

		return e.complexity.Folder.Parent(childComplexity), true
	case "Folder.parentId":
		if e.complexity.Folder.ParentID == nil {
			break
		}

		return e.complexity.Folder.ParentID(childComplexity), true
	case "Folder.updatedAt":
		if e.complexity.Folder.UpdatedAt == nil {
			break
		}

		return e.complexity.Folder.UpdatedAt(childComplexity), true

	case "FolderCollection.items":
		if e.complexity.FolderCollection.Items == nil {
			break
		}

		return e.complexity.FolderCollection.Items(childComplexity), true
	case "FolderCollection.page":
		if e.complexity.FolderCollection.Page == nil {
			break
		}

		return e.complexity.FolderCollection.Page(childComplexity), true
	case "FolderCollection.pageSize":
		if e.complexity.FolderCollection.PageSize == nil {
			break
		}

		return e.complexity.FolderCollection.PageSize(childComplexity), true
	case "FolderCollection.totalCount":
		if e.complexity.FolderCollection.TotalCount == nil {
			break
		}

		return e.complexity.FolderCollection.TotalCount(childComplexity), true

	case "FolderTree.children":
		if e.complexity.FolderTree.Children == nil {
			break
		}

		return e.complexity.FolderTree.Children(childComplexity), true
	case "FolderTree.folder":
		if e.complexity.FolderTree.Folder == nil {
			break
		}

		return e.complexity.FolderTree.Folder(childComplexity), true

	case "Lesson.code":
		if e.complexity.Lesson.Code == nil {
			break
		}

		return e.complexity.Lesson.Code(childComplexity), true
	case "Lesson.createdAt":
		if e.complexity.Lesson.CreatedAt == nil {
			break
		}

		return e.complexity.Lesson.CreatedAt(childComplexity), true
	case "Lesson.createdBy":
		if e.complexity.Lesson.CreatedBy == nil {
			break
		}

		return e.complexity.Lesson.CreatedBy(childComplexity), true
	case "Lesson.description":
		if e.complexity.Lesson.Description == nil {
			break
		}

		return e.complexity.Lesson.Description(childComplexity), true
	case "Lesson.id":
		if e.complexity.Lesson.ID == nil {
			break
		}

		return e.complexity.Lesson.ID(childComplexity), true
	case "Lesson.isPublished":
		if e.complexity.Lesson.IsPublished == nil {
			break
		}

		return e.complexity.Lesson.IsPublished(childComplexity), true
	case "Lesson.level":
		if e.complexity.Lesson.Level == nil {
			break
		}

		return e.complexity.Lesson.Level(childComplexity), true
	case "Lesson.publishedAt":
		if e.complexity.Lesson.PublishedAt == nil {
			break
		}

		return e.complexity.Lesson.PublishedAt(childComplexity), true
	case "Lesson.sections":
		if e.complexity.Lesson.Sections == nil {
			break
		}

		return e.complexity.Lesson.Sections(childComplexity), true
	case "Lesson.tags":
		if e.complexity.Lesson.Tags == nil {
			break
		}

		return e.complexity.Lesson.Tags(childComplexity), true
	case "Lesson.title":
		if e.complexity.Lesson.Title == nil {
			break
		}

		return e.complexity.Lesson.Title(childComplexity), true
	case "Lesson.topic":
		if e.complexity.Lesson.Topic == nil {
			break
		}

		return e.complexity.Lesson.Topic(childComplexity), true
	case "Lesson.updatedAt":
		if e.complexity.Lesson.UpdatedAt == nil {
			break
		}

		return e.complexity.Lesson.UpdatedAt(childComplexity), true
	case "Lesson.version":
		if e.complexity.Lesson.Version == nil {
			break
		}

		return e.complexity.Lesson.Version(childComplexity), true

	case "LessonCollection.items":
		if e.complexity.LessonCollection.Items == nil {
			break
		}

		return e.complexity.LessonCollection.Items(childComplexity), true
	case "LessonCollection.page":
		if e.complexity.LessonCollection.Page == nil {
			break
		}

		return e.complexity.LessonCollection.Page(childComplexity), true
	case "LessonCollection.pageSize":
		if e.complexity.LessonCollection.PageSize == nil {
			break
		}

		return e.complexity.LessonCollection.PageSize(childComplexity), true
	case "LessonCollection.totalCount":
		if e.complexity.LessonCollection.TotalCount == nil {
			break
		}

		return e.complexity.LessonCollection.TotalCount(childComplexity), true

	case "LessonSection.body":
		if e.complexity.LessonSection.Body == nil {
			break
		}

		return e.complexity.LessonSection.Body(childComplexity), true
	case "LessonSection.createdAt":
		if e.complexity.LessonSection.CreatedAt == nil {
			break
		}

		return e.complexity.LessonSection.CreatedAt(childComplexity), true
	case "LessonSection.id":
		if e.complexity.LessonSection.ID == nil {
			break
		}

		return e.complexity.LessonSection.ID(childComplexity), true
	case "LessonSection.lessonId":
		if e.complexity.LessonSection.LessonID == nil {
			break
		}

		return e.complexity.LessonSection.LessonID(childComplexity), true
	case "LessonSection.ord":
		if e.complexity.LessonSection.Ord == nil {
			break
		}

		return e.complexity.LessonSection.Ord(childComplexity), true
	case "LessonSection.type":
		if e.complexity.LessonSection.Type == nil {
			break
		}

		return e.complexity.LessonSection.Type(childComplexity), true

	case "LessonSectionCollection.items":
		if e.complexity.LessonSectionCollection.Items == nil {
			break
		}

		return e.complexity.LessonSectionCollection.Items(childComplexity), true
	case "LessonSectionCollection.page":
		if e.complexity.LessonSectionCollection.Page == nil {
			break
		}

		return e.complexity.LessonSectionCollection.Page(childComplexity), true
	case "LessonSectionCollection.pageSize":
		if e.complexity.LessonSectionCollection.PageSize == nil {
			break
		}

		return e.complexity.LessonSectionCollection.PageSize(childComplexity), true
	case "LessonSectionCollection.totalCount":
		if e.complexity.LessonSectionCollection.TotalCount == nil {
			break
		}

		return e.complexity.LessonSectionCollection.TotalCount(childComplexity), true

	case "Level.code":
		if e.complexity.Level.Code == nil {
			break
		}

		return e.complexity.Level.Code(childComplexity), true
	case "Level.id":
		if e.complexity.Level.ID == nil {
			break
		}

		return e.complexity.Level.ID(childComplexity), true
	case "Level.name":
		if e.complexity.Level.Name == nil {
			break
		}

		return e.complexity.Level.Name(childComplexity), true

	case "MediaAsset.bytes":
		if e.complexity.MediaAsset.Bytes == nil {
			break
		}

		return e.complexity.MediaAsset.Bytes(childComplexity), true
	case "MediaAsset.createdAt":
		if e.complexity.MediaAsset.CreatedAt == nil {
			break
		}

		return e.complexity.MediaAsset.CreatedAt(childComplexity), true
	case "MediaAsset.downloadURL":
		if e.complexity.MediaAsset.DownloadURL == nil {
			break
		}

		return e.complexity.MediaAsset.DownloadURL(childComplexity), true
	case "MediaAsset.durationMs":
		if e.complexity.MediaAsset.DurationMs == nil {
			break
		}

		return e.complexity.MediaAsset.DurationMs(childComplexity), true
	case "MediaAsset.folderId":
		if e.complexity.MediaAsset.FolderID == nil {
			break
		}

		return e.complexity.MediaAsset.FolderID(childComplexity), true
	case "MediaAsset.id":
		if e.complexity.MediaAsset.ID == nil {
			break
		}

		return e.complexity.MediaAsset.ID(childComplexity), true
	case "MediaAsset.kind":
		if e.complexity.MediaAsset.Kind == nil {
			break
		}

		return e.complexity.MediaAsset.Kind(childComplexity), true
	case "MediaAsset.mimeType":
		if e.complexity.MediaAsset.MimeType == nil {
			break
		}

		return e.complexity.MediaAsset.MimeType(childComplexity), true
	case "MediaAsset.originalName":
		if e.complexity.MediaAsset.OriginalName == nil {
			break
		}

		return e.complexity.MediaAsset.OriginalName(childComplexity), true
	case "MediaAsset.sha256":
		if e.complexity.MediaAsset.Sha256 == nil {
			break
		}

		return e.complexity.MediaAsset.Sha256(childComplexity), true
	case "MediaAsset.storageKey":
		if e.complexity.MediaAsset.StorageKey == nil {
			break
		}

		return e.complexity.MediaAsset.StorageKey(childComplexity), true
	case "MediaAsset.thumbnailURL":
		if e.complexity.MediaAsset.ThumbnailURL == nil {
			break
		}

		return e.complexity.MediaAsset.ThumbnailURL(childComplexity), true
	case "MediaAsset.uploadedBy":
		if e.complexity.MediaAsset.UploadedBy == nil {
			break
		}

		return e.complexity.MediaAsset.UploadedBy(childComplexity), true

	case "MediaAssetCollection.items":
		if e.complexity.MediaAssetCollection.Items == nil {
			break
		}

		return e.complexity.MediaAssetCollection.Items(childComplexity), true
	case "MediaAssetCollection.page":
		if e.complexity.MediaAssetCollection.Page == nil {
			break
		}

		return e.complexity.MediaAssetCollection.Page(childComplexity), true
	case "MediaAssetCollection.pageSize":
		if e.complexity.MediaAssetCollection.PageSize == nil {
			break
		}

		return e.complexity.MediaAssetCollection.PageSize(childComplexity), true
	case "MediaAssetCollection.totalCount":
		if e.complexity.MediaAssetCollection.TotalCount == nil {
			break
		}

		return e.complexity.MediaAssetCollection.TotalCount(childComplexity), true

	case "Mutation.addContentTag":
		if e.complexity.Mutation.AddContentTag == nil {
			break
		}

		args, err := ec.field_Mutation_addContentTag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddContentTag(childComplexity, args["input"].(model.ContentTagInput)), true
	case "Mutation.addFlashcard":
		if e.complexity.Mutation.AddFlashcard == nil {
			break
		}

		args, err := ec.field_Mutation_addFlashcard_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFlashcard(childComplexity, args["input"].(model.AddFlashcardInput)), true
	case "Mutation.addQuestionOption":
		if e.complexity.Mutation.AddQuestionOption == nil {
			break
		}

		args, err := ec.field_Mutation_addQuestionOption_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddQuestionOption(childComplexity, args["questionId"].(string), args["input"].(model.CreateQuestionOptionInput)), true
	case "Mutation.addQuizQuestion":
		if e.complexity.Mutation.AddQuizQuestion == nil {
			break
		}

		args, err := ec.field_Mutation_addQuizQuestion_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddQuizQuestion(childComplexity, args["quizId"].(string), args["input"].(model.CreateQuizQuestionInput)), true
	case "Mutation.createFlashcardSet":
		if e.complexity.Mutation.CreateFlashcardSet == nil {
			break
		}

		args, err := ec.field_Mutation_createFlashcardSet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFlashcardSet(childComplexity, args["input"].(model.CreateFlashcardSetInput)), true
	case "Mutation.createFolder":
		if e.complexity.Mutation.CreateFolder == nil {
			break
		}

		args, err := ec.field_Mutation_createFolder_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFolder(childComplexity, args["input"].(model.CreateFolderInput)), true
	case "Mutation.createLesson":
		if e.complexity.Mutation.CreateLesson == nil {
			break
		}

		args, err := ec.field_Mutation_createLesson_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLesson(childComplexity, args["input"].(model.CreateLessonInput)), true
	case "Mutation.createLessonSection":
		if e.complexity.Mutation.CreateLessonSection == nil {
			break
		}

		args, err := ec.field_Mutation_createLessonSection_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLessonSection(childComplexity, args["lessonId"].(string), args["input"].(model.CreateLessonSectionInput)), true
	case "Mutation.createLevel":
		if e.complexity.Mutation.CreateLevel == nil {
			break
		}

		args, err := ec.field_Mutation_createLevel_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLevel(childComplexity, args["input"].(model.CreateLevelInput)), true
	case "Mutation.createQuiz":
		if e.complexity.Mutation.CreateQuiz == nil {
			break
		}

		args, err := ec.field_Mutation_createQuiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateQuiz(childComplexity, args["input"].(model.CreateQuizInput)), true
	case "Mutation.createTag":
		if e.complexity.Mutation.CreateTag == nil {
			break
		}

		args, err := ec.field_Mutation_createTag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTag(childComplexity, args["input"].(model.CreateTagInput)), true
	case "Mutation.createTopic":
		if e.complexity.Mutation.CreateTopic == nil {
			break
		}

		args, err := ec.field_Mutation_createTopic_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTopic(childComplexity, args["input"].(model.CreateTopicInput)), true
	case "Mutation.deleteFolder":
		if e.complexity.Mutation.DeleteFolder == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFolder_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFolder(childComplexity, args["id"].(string)), true
	case "Mutation.deleteLesson":
		if e.complexity.Mutation.DeleteLesson == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLesson_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLesson(childComplexity, args["id"].(string)), true
	case "Mutation.deleteLessonSection":
		if e.complexity.Mutation.DeleteLessonSection == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLessonSection_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLessonSection(childComplexity, args["id"].(string)), true
	case "Mutation.deleteLevel":
		if e.complexity.Mutation.DeleteLevel == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLevel_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLevel(childComplexity, args["id"].(string)), true
	case "Mutation.deleteMedia":
		if e.complexity.Mutation.DeleteMedia == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMedia_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMedia(childComplexity, args["id"].(string)), true
	case "Mutation.deleteQuestionOption":
		if e.complexity.Mutation.DeleteQuestionOption == nil {
			break
		}

		args, err := ec.field_Mutation_deleteQuestionOption_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteQuestionOption(childComplexity, args["id"].(string)), true
	case "Mutation.deleteQuiz":
		if e.complexity.Mutation.DeleteQuiz == nil {
			break
		}

		args, err := ec.field_Mutation_deleteQuiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteQuiz(childComplexity, args["id"].(string)), true
	case "Mutation.deleteTag":
		if e.complexity.Mutation.DeleteTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTag(childComplexity, args["id"].(string)), true
	case "Mutation.deleteTopic":
		if e.complexity.Mutation.DeleteTopic == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTopic_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTopic(childComplexity, args["id"].(string)), true
	case "Mutation.publishLesson":
		if e.complexity.Mutation.PublishLesson == nil {
			break
		}

		args, err := ec.field_Mutation_publishLesson_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PublishLesson(childComplexity, args["id"].(string)), true
	case "Mutation.removeContentTag":
		if e.complexity.Mutation.RemoveContentTag == nil {
			break
		}

		args, err := ec.field_Mutation_removeContentTag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveContentTag(childComplexity, args["input"].(model.ContentTagInput)), true
	case "Mutation.unpublishLesson":
		if e.complexity.Mutation.UnpublishLesson == nil {
			break
		}

		args, err := ec.field_Mutation_unpublishLesson_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnpublishLesson(childComplexity, args["id"].(string)), true
	case "Mutation.updateFolder":
		if e.complexity.Mutation.UpdateFolder == nil {
			break
		}

		args, err := ec.field_Mutation_updateFolder_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFolder(childComplexity, args["id"].(string), args["input"].(model.UpdateFolderInput)), true
	case "Mutation.updateLesson":
		if e.complexity.Mutation.UpdateLesson == nil {
			break
		}

		args, err := ec.field_Mutation_updateLesson_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLesson(childComplexity, args["id"].(string), args["input"].(model.UpdateLessonInput)), true
	case "Mutation.updateLessonSection":
		if e.complexity.Mutation.UpdateLessonSection == nil {
			break
		}

		args, err := ec.field_Mutation_updateLessonSection_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLessonSection(childComplexity, args["id"].(string), args["input"].(model.UpdateLessonSectionInput)), true
	case "Mutation.updateLevel":
		if e.complexity.Mutation.UpdateLevel == nil {
			break
		}

		args, err := ec.field_Mutation_updateLevel_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLevel(childComplexity, args["id"].(string), args["input"].(model.UpdateLevelInput)), true
	case "Mutation.updateQuestionOption":
		if e.complexity.Mutation.UpdateQuestionOption == nil {
			break
		}

		args, err := ec.field_Mutation_updateQuestionOption_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateQuestionOption(childComplexity, args["id"].(string), args["input"].(model.UpdateQuestionOptionInput)), true
	case "Mutation.updateQuiz":
		if e.complexity.Mutation.UpdateQuiz == nil {
			break
		}

		args, err := ec.field_Mutation_updateQuiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateQuiz(childComplexity, args["id"].(string), args["input"].(model.UpdateQuizInput)), true
	case "Mutation.updateTag":
		if e.complexity.Mutation.UpdateTag == nil {
			break
		}

		args, err := ec.field_Mutation_updateTag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTag(childComplexity, args["id"].(string), args["input"].(model.UpdateTagInput)), true
	case "Mutation.updateTopic":
		if e.complexity.Mutation.UpdateTopic == nil {
			break
		}

		args, err := ec.field_Mutation_updateTopic_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTopic(childComplexity, args["id"].(string), args["input"].(model.UpdateTopicInput)), true
	case "Mutation.uploadMedia":
		if e.complexity.Mutation.UploadMedia == nil {
			break
		}

		args, err := ec.field_Mutation_uploadMedia_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadMedia(childComplexity, args["input"].(model.UploadMediaInput)), true

	case "Query.flashcardSet":
		if e.complexity.Query.FlashcardSet == nil {
			break
		}

		args, err := ec.field_Query_flashcardSet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FlashcardSet(childComplexity, args["id"].(string)), true
	case "Query.flashcardSets":
		if e.complexity.Query.FlashcardSets == nil {
			break
		}

		args, err := ec.field_Query_flashcardSets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FlashcardSets(childComplexity, args["filter"].(*model.FlashcardSetFilterInput), args["page"].(*int), args["pageSize"].(*int), args["orderBy"].(*model.FlashcardSetOrderInput)), true
	case "Query.flashcards":
		if e.complexity.Query.Flashcards == nil {
			break
		}

		args, err := ec.field_Query_flashcards_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Flashcards(childComplexity, args["setId"].(string), args["filter"].(*model.FlashcardFilterInput), args["page"].(*int), args["pageSize"].(*int), args["orderBy"].(*model.FlashcardOrderInput)), true
	case "Query.folder":
		if e.complexity.Query.Folder == nil {
			break
		}

		args, err := ec.field_Query_folder_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Folder(childComplexity, args["id"].(string)), true
	case "Query.folderPath":
		if e.complexity.Query.FolderPath == nil {
			break
		}

		args, err := ec.field_Query_folderPath_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FolderPath(childComplexity, args["id"].(string)), true
	case "Query.folderTree":
		if e.complexity.Query.FolderTree == nil {
			break
		}

		args, err := ec.field_Query_folderTree_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FolderTree(childComplexity, args["id"].(string)), true
	case "Query.folders":
		if e.complexity.Query.Folders == nil {
			break
		}

		args, err := ec.field_Query_folders_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Folders(childComplexity, args["filter"].(*model.FolderFilterInput), args["page"].(*int), args["pageSize"].(*int), args["orderBy"].(*model.FolderOrderInput)), true
	case "Query.health":
		if e.complexity.Query.Health == nil {
			break
		}

		return e.complexity.Query.Health(childComplexity), true
	case "Query.lesson":
		if e.complexity.Query.Lesson == nil {
			break
		}

		args, err := ec.field_Query_lesson_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lesson(childComplexity, args["id"].(string)), true
	case "Query.lessonByCode":
		if e.complexity.Query.LessonByCode == nil {
			break
		}

		args, err := ec.field_Query_lessonByCode_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LessonByCode(childComplexity, args["code"].(string)), true
	case "Query.lessonSections":
		if e.complexity.Query.LessonSections == nil {
			break
		}

		args, err := ec.field_Query_lessonSections_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LessonSections(childComplexity, args["lessonId"].(string), args["filter"].(*model.LessonSectionFilterInput), args["page"].(*int), args["pageSize"].(*int), args["orderBy"].(*model.LessonSectionOrderInput)), true
	case "Query.lessons":
		if e.complexity.Query.Lessons == nil {
			break
		}

		args, err := ec.field_Query_lessons_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lessons(childComplexity, args["filter"].(*model.LessonFilterInput), args["page"].(*int), args["pageSize"].(*int), args["orderBy"].(*model.LessonOrderInput)), true
	case "Query.level":
		if e.complexity.Query.Level == nil {
			break
		}

		args, err := ec.field_Query_level_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Level(childComplexity, args["id"].(*string), args["code"].(*string)), true
	case "Query.levels":
		if e.complexity.Query.Levels == nil {
			break
		}

		args, err := ec.field_Query_levels_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Levels(childComplexity, args["search"].(*string)), true
	case "Query.mediaAsset":
		if e.complexity.Query.MediaAsset == nil {
			break
		}

		args, err := ec.field_Query_mediaAsset_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MediaAsset(childComplexity, args["id"].(string)), true
	case "Query.mediaAssetCollection":
		if e.complexity.Query.MediaAssetCollection == nil {
			break
		}

		args, err := ec.field_Query_mediaAssetCollection_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MediaAssetCollection(childComplexity, args["filter"].(*model.MediaAssetFilterInput), args["page"].(*int), args["pageSize"].(*int), args["orderBy"].(*model.MediaAssetOrderInput)), true
	case "Query.mediaAssets":
		if e.complexity.Query.MediaAssets == nil {
			break
		}

		args, err := ec.field_Query_mediaAssets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MediaAssets(childComplexity, args["ids"].([]string)), true
	case "Query.quiz":
		if e.complexity.Query.Quiz == nil {
			break
		}

		args, err := ec.field_Query_quiz_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Quiz(childComplexity, args["id"].(string)), true
	case "Query.quizQuestions":
		if e.complexity.Query.QuizQuestions == nil {
			break
		}

		args, err := ec.field_Query_quizQuestions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QuizQuestions(childComplexity, args["quizId"].(string), args["filter"].(*model.QuizQuestionFilterInput), args["page"].(*int), args["pageSize"].(*int), args["orderBy"].(*model.QuizQuestionOrderInput)), true
	case "Query.quizzes":
		if e.complexity.Query.Quizzes == nil {
			break
		}

		args, err := ec.field_Query_quizzes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Quizzes(childComplexity, args["lessonId"].(*string), args["topicId"].(*string), args["levelId"].(*string), args["search"].(*string), args["page"].(*int), args["pageSize"].(*int), args["orderBy"].(*model.QuizOrderInput)), true
	case "Query.rootFolders":
		if e.complexity.Query.RootFolders == nil {
			break
		}

		return e.complexity.Query.RootFolders(childComplexity), true
	case "Query.tag":
		if e.complexity.Query.Tag == nil {
			break
		}

		args, err := ec.field_Query_tag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tag(childComplexity, args["id"].(*string), args["slug"].(*string)), true
	case "Query.tags":
		if e.complexity.Query.Tags == nil {
			break
		}

		args, err := ec.field_Query_tags_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tags(childComplexity, args["search"].(*string)), true
	case "Query.topic":
		if e.complexity.Query.Topic == nil {
			break
		}

		args, err := ec.field_Query_topic_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Topic(childComplexity, args["id"].(*string), args["slug"].(*string)), true
	case "Query.topics":
		if e.complexity.Query.Topics == nil {
			break
		}

		args, err := ec.field_Query_topics_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Topics(childComplexity, args["search"].(*string)), true

	case "QuestionOption.feedback":
		if e.complexity.QuestionOption.Feedback == nil {
			break
		}

		return e.complexity.QuestionOption.Feedback(childComplexity), true
	case "QuestionOption.id":
		if e.complexity.QuestionOption.ID == nil {
			break
		}

		return e.complexity.QuestionOption.ID(childComplexity), true
	case "QuestionOption.isCorrect":
		if e.complexity.QuestionOption.IsCorrect == nil {
			break
		}

		return e.complexity.QuestionOption.IsCorrect(childComplexity), true
	case "QuestionOption.label":
		if e.complexity.QuestionOption.Label == nil {
			break
		}

		return e.complexity.QuestionOption.Label(childComplexity), true
	case "QuestionOption.ord":
		if e.complexity.QuestionOption.Ord == nil {
			break
		}

		return e.complexity.QuestionOption.Ord(childComplexity), true
	case "QuestionOption.questionId":
		if e.complexity.QuestionOption.QuestionID == nil {
			break
		}

		return e.complexity.QuestionOption.QuestionID(childComplexity), true

	case "Quiz.createdAt":
		if e.complexity.Quiz.CreatedAt == nil {
			break
		}

		return e.complexity.Quiz.CreatedAt(childComplexity), true
	case "Quiz.description":
		if e.complexity.Quiz.Description == nil {
			break
		}

		return e.complexity.Quiz.Description(childComplexity), true
	case "Quiz.id":
		if e.complexity.Quiz.ID == nil {
			break
		}

		return e.complexity.Quiz.ID(childComplexity), true
	case "Quiz.lessonId":
		if e.complexity.Quiz.LessonID == nil {
			break
		}

		return e.complexity.Quiz.LessonID(childComplexity), true
	case "Quiz.level":
		if e.complexity.Quiz.Level == nil {
			break
		}

		return e.complexity.Quiz.Level(childComplexity), true
	case "Quiz.questions":
		if e.complexity.Quiz.Questions == nil {
			break
		}

		return e.complexity.Quiz.Questions(childComplexity), true
	case "Quiz.tags":
		if e.complexity.Quiz.Tags == nil {
			break
		}

		return e.complexity.Quiz.Tags(childComplexity), true
	case "Quiz.timeLimitS":
		if e.complexity.Quiz.TimeLimitS == nil {
			break
		}

		return e.complexity.Quiz.TimeLimitS(childComplexity), true
	case "Quiz.title":
		if e.complexity.Quiz.Title == nil {
			break
		}

		return e.complexity.Quiz.Title(childComplexity), true
	case "Quiz.topic":
		if e.complexity.Quiz.Topic == nil {
			break
		}

		return e.complexity.Quiz.Topic(childComplexity), true
	case "Quiz.totalPoints":
		if e.complexity.Quiz.TotalPoints == nil {
			break
		}

		return e.complexity.Quiz.TotalPoints(childComplexity), true

	case "QuizCollection.items":
		if e.complexity.QuizCollection.Items == nil {
			break
		}

		return e.complexity.QuizCollection.Items(childComplexity), true
	case "QuizCollection.page":
		if e.complexity.QuizCollection.Page == nil {
			break
		}

		return e.complexity.QuizCollection.Page(childComplexity), true
	case "QuizCollection.pageSize":
		if e.complexity.QuizCollection.PageSize == nil {
			break
		}

		return e.complexity.QuizCollection.PageSize(childComplexity), true
	case "QuizCollection.totalCount":
		if e.complexity.QuizCollection.TotalCount == nil {
			break
		}

		return e.complexity.QuizCollection.TotalCount(childComplexity), true

	case "QuizQuestion.id":
		if e.complexity.QuizQuestion.ID == nil {
			break
		}

		return e.complexity.QuizQuestion.ID(childComplexity), true
	case "QuizQuestion.metadata":
		if e.complexity.QuizQuestion.Metadata == nil {
			break
		}

		return e.complexity.QuizQuestion.Metadata(childComplexity), true
	case "QuizQuestion.options":
		if e.complexity.QuizQuestion.Options == nil {
			break
		}

		return e.complexity.QuizQuestion.Options(childComplexity), true
	case "QuizQuestion.ord":
		if e.complexity.QuizQuestion.Ord == nil {
			break
		}

		return e.complexity.QuizQuestion.Ord(childComplexity), true
	case "QuizQuestion.points":
		if e.complexity.QuizQuestion.Points == nil {
			break
		}

		return e.complexity.QuizQuestion.Points(childComplexity), true
	case "QuizQuestion.prompt":
		if e.complexity.QuizQuestion.Prompt == nil {
			break
		}

		return e.complexity.QuizQuestion.Prompt(childComplexity), true
	case "QuizQuestion.promptMedia":
		if e.complexity.QuizQuestion.PromptMedia == nil {
			break
		}

		return e.complexity.QuizQuestion.PromptMedia(childComplexity), true
	case "QuizQuestion.quizId":
		if e.complexity.QuizQuestion.QuizID == nil {
			break
		}

		return e.complexity.QuizQuestion.QuizID(childComplexity), true
	case "QuizQuestion.type":
		if e.complexity.QuizQuestion.Type == nil {
			break
		}

		return e.complexity.QuizQuestion.Type(childComplexity), true

	case "QuizQuestionCollection.items":
		if e.complexity.QuizQuestionCollection.Items == nil {
			break
		}

		return e.complexity.QuizQuestionCollection.Items(childComplexity), true
	case "QuizQuestionCollection.page":
		if e.complexity.QuizQuestionCollection.Page == nil {
			break
		}

		return e.complexity.QuizQuestionCollection.Page(childComplexity), true
	case "QuizQuestionCollection.pageSize":
		if e.complexity.QuizQuestionCollection.PageSize == nil {
			break
		}

		return e.complexity.QuizQuestionCollection.PageSize(childComplexity), true
	case "QuizQuestionCollection.totalCount":
		if e.complexity.QuizQuestionCollection.TotalCount == nil {
			break
		}

		return e.complexity.QuizQuestionCollection.TotalCount(childComplexity), true

	case "Tag.id":
		if e.complexity.Tag.ID == nil {
			break
		}

		return e.complexity.Tag.ID(childComplexity), true
	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true
	case "Tag.slug":
		if e.complexity.Tag.Slug == nil {
			break
		}

		return e.complexity.Tag.Slug(childComplexity), true

	case "Topic.createdAt":
		if e.complexity.Topic.CreatedAt == nil {
			break
		}

		return e.complexity.Topic.CreatedAt(childComplexity), true
	case "Topic.id":
		if e.complexity.Topic.ID == nil {
			break
		}

		return e.complexity.Topic.ID(childComplexity), true
	case "Topic.name":
		if e.complexity.Topic.Name == nil {
			break
		}

		return e.complexity.Topic.Name(childComplexity), true
	case "Topic.slug":
		if e.complexity.Topic.Slug == nil {
			break
		}

		return e.complexity.Topic.Slug(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAddFlashcardInput,
		ec.unmarshalInputContentTagInput,
		ec.unmarshalInputCreateFlashcardSetInput,
		ec.unmarshalInputCreateFolderInput,
		ec.unmarshalInputCreateLessonInput,
		ec.unmarshalInputCreateLessonSectionInput,
		ec.unmarshalInputCreateLevelInput,
		ec.unmarshalInputCreateQuestionOptionInput,
		ec.unmarshalInputCreateQuizInput,
		ec.unmarshalInputCreateQuizQuestionInput,
		ec.unmarshalInputCreateTagInput,
		ec.unmarshalInputCreateTopicInput,
		ec.unmarshalInputFlashcardFilterInput,
		ec.unmarshalInputFlashcardOrderInput,
		ec.unmarshalInputFlashcardSetFilterInput,
		ec.unmarshalInputFlashcardSetOrderInput,
		ec.unmarshalInputFolderFilterInput,
		ec.unmarshalInputFolderOrderInput,
		ec.unmarshalInputLessonFilterInput,
		ec.unmarshalInputLessonOrderInput,
		ec.unmarshalInputLessonSectionFilterInput,
		ec.unmarshalInputLessonSectionOrderInput,
		ec.unmarshalInputMediaAssetFilterInput,
		ec.unmarshalInputMediaAssetOrderInput,
		ec.unmarshalInputQuizOrderInput,
		ec.unmarshalInputQuizQuestionFilterInput,
		ec.unmarshalInputQuizQuestionOrderInput,
		ec.unmarshalInputUpdateFolderInput,
		ec.unmarshalInputUpdateLessonInput,
		ec.unmarshalInputUpdateLessonSectionInput,
		ec.unmarshalInputUpdateLevelInput,
		ec.unmarshalInputUpdateQuestionOptionInput,
		ec.unmarshalInputUpdateQuizInput,
		ec.unmarshalInputUpdateTagInput,
		ec.unmarshalInputUpdateTopicInput,
		ec.unmarshalInputUploadMediaInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `schema {
  query: Query
  mutation: Mutation
}

type Query {
  health: String!

  topic(id: ID, slug: String): Topic
  topics(search: String): [Topic!]!

  level(id: ID, code: String): Level
  levels(search: String): [Level!]!

  tag(id: ID, slug: String): Tag
  tags(search: String): [Tag!]!

  folder(id: ID!): Folder
  folders(filter: FolderFilterInput, page: Int = 1, pageSize: Int = 100, orderBy: FolderOrderInput): FolderCollection!
  rootFolders: [Folder!]!
  folderTree(id: ID!): FolderTree!
  folderPath(id: ID!): [Folder!]!

  mediaAsset(id: ID!): MediaAsset
  mediaAssets(ids: [ID!]!): [MediaAsset!]!
  mediaAssetCollection(filter: MediaAssetFilterInput, page: Int, pageSize: Int, orderBy: MediaAssetOrderInput): MediaAssetCollection!

  lesson(id: ID!): Lesson
  lessonByCode(code: String!): Lesson

  quiz(id: ID!): Quiz
  quizzes(lessonId: ID, topicId: ID, levelId: ID, search: String, page: Int = 1, pageSize: Int = 20, orderBy: QuizOrderInput): QuizCollection!
  quizQuestions(quizId: ID!, filter: QuizQuestionFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: QuizQuestionOrderInput): QuizQuestionCollection!
  flashcardSet(id: ID!): FlashcardSet
  flashcardSets(filter: FlashcardSetFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: FlashcardSetOrderInput): FlashcardSetList!
  flashcards(setId: ID!, filter: FlashcardFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: FlashcardOrderInput): FlashcardCollection!
  lessons(filter: LessonFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: LessonOrderInput): LessonCollection!

  lessonSections(lessonId: ID!, filter: LessonSectionFilterInput, page: Int = 1, pageSize: Int = 20, orderBy: LessonSectionOrderInput): LessonSectionCollection!
}

type Mutation {
  createTopic(input: CreateTopicInput!): Topic!
  updateTopic(id: ID!, input: UpdateTopicInput!): Topic!
  deleteTopic(id: ID!): Boolean!

  createLevel(input: CreateLevelInput!): Level!
  updateLevel(id: ID!, input: UpdateLevelInput!): Level!
  deleteLevel(id: ID!): Boolean!

  createTag(input: CreateTagInput!): Tag!
  updateTag(id: ID!, input: UpdateTagInput!): Tag!
  deleteTag(id: ID!): Boolean!

  createFolder(input: CreateFolderInput!): Folder!
  updateFolder(id: ID!, input: UpdateFolderInput!): Folder!
  deleteFolder(id: ID!): Boolean!

  uploadMedia(input: UploadMediaInput!): MediaAsset!
  deleteMedia(id: ID!): Boolean!

  createLesson(input: CreateLessonInput!): Lesson!
  updateLesson(id: ID!, input: UpdateLessonInput!): Lesson!
  deleteLesson(id: ID!): Boolean!
  publishLesson(id: ID!): Lesson!
  unpublishLesson(id: ID!): Lesson!

  createLessonSection(lessonId: ID!, input: CreateLessonSectionInput!): LessonSection!
  updateLessonSection(id: ID!, input: UpdateLessonSectionInput!): LessonSection!
  deleteLessonSection(id: ID!): Boolean!

  createFlashcardSet(input: CreateFlashcardSetInput!): FlashcardSet!
  addFlashcard(input: AddFlashcardInput!): Flashcard!

  createQuiz(input: CreateQuizInput!): Quiz!
  updateQuiz(id: ID!, input: UpdateQuizInput!): Quiz!
  deleteQuiz(id: ID!): Boolean!
  addQuizQuestion(quizId: ID!, input: CreateQuizQuestionInput!): QuizQuestion!
  addQuestionOption(questionId: ID!, input: CreateQuestionOptionInput!): QuestionOption!
  updateQuestionOption(id: ID!, input: UpdateQuestionOptionInput!): QuestionOption!
  deleteQuestionOption(id: ID!): Boolean!

  addContentTag(input: ContentTagInput!): ContentTag!
  removeContentTag(input: ContentTagInput!): Boolean!

}

type Topic {
  id: ID!
  slug: String!
  name: String!
  createdAt: Time!
}

input CreateTopicInput {
  slug: String!
  name: String!
}

input UpdateTopicInput {
  slug: String
  name: String
}

type Level {
  id: ID!
  code: String!
  name: String!
}

input CreateLevelInput {
  code: String!
  name: String!
}

input UpdateLevelInput {
  code: String
  name: String
}

type Tag {
  id: ID!
  slug: String!
  name: String!
}

input CreateTagInput {
  slug: String!
  name: String!
}

input UpdateTagInput {
  slug: String
  name: String
}

enum MediaKind {
  IMAGE
  AUDIO
}

type MediaAsset {
  id: ID!
  storageKey: String!
  kind: MediaKind!
  mimeType: String!
  folderId: ID
  originalName: String!
  thumbnailURL: String
  bytes: Int!
  durationMs: Int
  sha256: String!
  createdAt: Time!
  uploadedBy: ID
  downloadURL: String!
}

input MediaAssetFilterInput {
  folderId: ID
  kind: MediaKind
  uploadedBy: ID
  sha256: String
  search: String
}

enum MediaAssetOrderField {
  CREATED_AT
  BYTES
}

input MediaAssetOrderInput {
  field: MediaAssetOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

type MediaAssetCollection {
  items: [MediaAsset!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input UploadMediaInput {
  file: Upload!
  kind: MediaKind!
  mimeType: String!
  filename: String
  uploadedBy: ID
  folderId: ID
}


type Lesson {
  id: ID!
  code: String
  title: String!
  description: String
  topic: Topic
  level: Level
  isPublished: Boolean!
  version: Int!
  createdBy: ID
  createdAt: Time!
  updatedAt: Time!
  publishedAt: Time
  tags: [Tag!]!
  sections: [LessonSection!]!
}

input CreateLessonInput {
  code: String
  title: String!
  description: String
  topicId: ID
  levelId: ID
  createdBy: ID
}

type Quiz {
  id: ID!
  lessonId: ID
  title: String!
  description: String
  totalPoints: Int!
  timeLimitS: Int
  createdAt: Time!
  topic: Topic
  level: Level
  tags: [Tag!]!
  questions: [QuizQuestion!]!
}

type QuizQuestion {
  id: ID!
  quizId: ID!
  ord: Int!
  type: String!
  prompt: String!
  promptMedia: ID
  points: Int!
  metadata: JSON!
  options: [QuestionOption!]!
}

enum QuizOrderField {
  CREATED_AT
  TOTAL_POINTS
}

input QuizOrderInput {
  field: QuizOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

type QuizCollection {
  items: [Quiz!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input QuizQuestionFilterInput {
  type: String
}

enum QuizQuestionOrderField {
  ORD
  POINTS
}

input QuizQuestionOrderInput {
  field: QuizQuestionOrderField! = ORD
  direction: OrderDirection! = ASC
}

type QuizQuestionCollection {
  items: [QuizQuestion!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input CreateQuizInput {
  lessonId: ID
  topicId: ID
  levelId: ID
  title: String!
  description: String
  timeLimitS: Int
}

input UpdateQuizInput {
  lessonId: ID
  topicId: ID
  levelId: ID
  title: String
  description: String
  timeLimitS: Int
}

input CreateQuizQuestionInput {
  type: String!
  prompt: String!
  promptMedia: ID
  points: Int = 1
  metadata: JSON
}

input CreateQuestionOptionInput {
  ord: Int!
  label: String!
  isCorrect: Boolean!
  feedback: String
}

input UpdateQuestionOptionInput {
  ord: Int
  label: String
  isCorrect: Boolean
  feedback: String
}
input UpdateLessonInput {
  title: String
  description: String
  topicId: ID
  levelId: ID
}

input LessonFilterInput {
  topicId: ID
  levelId: ID
  isPublished: Boolean
  search: String
  createdBy: ID
}

enum LessonOrderField {
  CREATED_AT
  PUBLISHED_AT
  VERSION
}

input LessonOrderInput {
  field: LessonOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

type LessonCollection {
  items: [Lesson!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

type LessonSection {
  id: ID!
  lessonId: ID!
  ord: Int!
  type: LessonSectionType!
  body: Map!
  createdAt: Time!
}

input LessonSectionFilterInput {
  type: LessonSectionType
}

enum LessonSectionOrderField {
  ORD
  CREATED_AT
}

input LessonSectionOrderInput {
  field: LessonSectionOrderField! = ORD
  direction: OrderDirection! = ASC
}

type LessonSectionCollection {
  items: [LessonSection!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

enum LessonSectionType {
  TEXT
  DIALOG
  AUDIO
  IMAGE
  EXERCISE
}

input CreateLessonSectionInput {
  type: LessonSectionType!
  body: Map!
}

input UpdateLessonSectionInput {
  type: LessonSectionType
  body: Map
}

scalar Time
scalar Upload
scalar JSON
scalar Map

enum OrderDirection {
  ASC
  DESC
}

type QuestionOption {
  id: ID!
  questionId: ID!
  ord: Int!
  label: String!
  isCorrect: Boolean!
  feedback: String
}

enum ContentTagKind {
  LESSON
  QUIZ
  FLASHCARD_SET
}

input ContentTagInput {
  tagId: ID!
  kind: ContentTagKind!
  objectId: ID!
}

type ContentTag {
  tagId: ID!
  kind: ContentTagKind!
  objectId: ID!
  tag: Tag
}

type FlashcardSet {
  id: ID!
  title: String!
  description: String
  topicId: ID
  levelId: ID
  createdAt: Time!
  createdBy: ID
  tags: [Tag!]!
  cards: [Flashcard!]!
}

type Flashcard {
  id: ID!
  setId: ID!
  frontText: String!
  backText: String!
  frontMediaId: ID
  backMediaId: ID
  ord: Int!
  hints: [String!]
  createdAt: Time!
}

input FlashcardSetFilterInput {
  topicId: ID
  levelId: ID
  createdBy: ID
  search: String
}

enum FlashcardSetOrderField {
  CREATED_AT
  CARD_COUNT
}

input FlashcardSetOrderInput {
  field: FlashcardSetOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

type FlashcardSetList {
  items: [FlashcardSet!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input FlashcardFilterInput {
  hasMedia: Boolean
}

enum FlashcardOrderField {
  ORD
  CREATED_AT
}

input FlashcardOrderInput {
  field: FlashcardOrderField! = ORD
  direction: OrderDirection! = ASC
}

type FlashcardCollection {
  items: [Flashcard!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input CreateFlashcardSetInput {
  title: String!
  description: String
  topicId: ID
  levelId: ID
  createdBy: ID
}

input AddFlashcardInput {
  setId: ID!
  frontText: String!
  backText: String!
  frontMediaId: ID
  backMediaId: ID
  hints: [String!]
}

# ============= FOLDER TYPES =============

type Folder {
  id: ID!
  name: String!
  parentId: ID
  parent: Folder
  depth: Int!
  children: [Folder!]
  childrenCount: Int!
  mediaCount: Int!
  createdAt: Time!
  updatedAt: Time!
}

type FolderTree {
  folder: Folder!
  children: [FolderTree!]!
}

type FolderCollection {
  items: [Folder!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

input CreateFolderInput {
  name: String!
  parentId: ID
}

input UpdateFolderInput {
  name: String!
}

input FolderFilterInput {
  parentId: ID
  depth: Int
  search: String
}

enum FolderOrderField {
  NAME
  CREATED_AT
}

input FolderOrderInput {
  field: FolderOrderField! = NAME
  direction: OrderDirection! = ASC
}


`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addContentTag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNContentTagInput2contentᚑservicesᚋgraphᚋmodelᚐContentTagInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addFlashcard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNAddFlashcardInput2contentᚑservicesᚋgraphᚋmodelᚐAddFlashcardInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addQuestionOption_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "questionId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["questionId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateQuestionOptionInput2contentᚑservicesᚋgraphᚋmodelᚐCreateQuestionOptionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addQuizQuestion_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "quizId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["quizId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateQuizQuestionInput2contentᚑservicesᚋgraphᚋmodelᚐCreateQuizQuestionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createFlashcardSet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateFlashcardSetInput2contentᚑservicesᚋgraphᚋmodelᚐCreateFlashcardSetInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFolder_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateFolderInput2contentᚑservicesᚋgraphᚋmodelᚐCreateFolderInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLessonSection_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "lessonId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["lessonId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateLessonSectionInput2contentᚑservicesᚋgraphᚋmodelᚐCreateLessonSectionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createLesson_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateLessonInput2contentᚑservicesᚋgraphᚋmodelᚐCreateLessonInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLevel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateLevelInput2contentᚑservicesᚋgraphᚋmodelᚐCreateLevelInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createQuiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateQuizInput2contentᚑservicesᚋgraphᚋmodelᚐCreateQuizInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateTagInput2contentᚑservicesᚋgraphᚋmodelᚐCreateTagInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTopic_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateTopicInput2contentᚑservicesᚋgraphᚋmodelᚐCreateTopicInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFolder_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLessonSection_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLesson_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLevel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMedia_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteQuestionOption_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteQuiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTopic_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_publishLesson_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeContentTag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNContentTagInput2contentᚑservicesᚋgraphᚋmodelᚐContentTagInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unpublishLesson_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFolder_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateFolderInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateFolderInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLessonSection_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateLessonSectionInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateLessonSectionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLesson_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateLessonInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateLessonInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLevel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateLevelInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateLevelInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateQuestionOption_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateQuestionOptionInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateQuestionOptionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateQuiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateQuizInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateQuizInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateTagInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateTagInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTopic_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateTopicInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateTopicInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadMedia_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUploadMediaInput2contentᚑservicesᚋgraphᚋmodelᚐUploadMediaInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_flashcardSet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_flashcardSets_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOFlashcardSetFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSetFilterInput)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "page", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["page"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "pageSize", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["pageSize"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOFlashcardSetOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSetOrderInput)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_flashcards_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "setId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["setId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOFlashcardFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardFilterInput)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "page", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "pageSize", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["pageSize"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOFlashcardOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardOrderInput)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_folderPath_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_folderTree_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_folder_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_folders_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOFolderFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderFilterInput)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "page", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["page"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "pageSize", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["pageSize"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOFolderOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderOrderInput)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_lessonByCode_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "code", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lessonSections_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "lessonId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["lessonId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOLessonSectionFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionFilterInput)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "page", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "pageSize", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["pageSize"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOLessonSectionOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionOrderInput)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_lesson_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lessons_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOLessonFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonFilterInput)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "page", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["page"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "pageSize", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["pageSize"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOLessonOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonOrderInput)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_level_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "code", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["code"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_levels_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mediaAssetCollection_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOMediaAssetFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAssetFilterInput)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "page", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["page"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "pageSize", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["pageSize"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOMediaAssetOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAssetOrderInput)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_mediaAsset_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mediaAssets_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "ids", ec.unmarshalNID2ᚕstringᚄ)
	if err != nil {
		return nil, err
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_quizQuestions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "quizId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["quizId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOQuizQuestionFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestionFilterInput)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "page", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["page"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "pageSize", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["pageSize"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOQuizQuestionOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestionOrderInput)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_quiz_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_quizzes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "lessonId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["lessonId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "topicId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["topicId"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "levelId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["levelId"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["search"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "page", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["page"] = arg4
	arg5, err := graphql.ProcessArgField(ctx, rawArgs, "pageSize", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["pageSize"] = arg5
	arg6, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOQuizOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizOrderInput)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_tag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "slug", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["slug"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_tags_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_topic_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "slug", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["slug"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_topics_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ContentTag_tagId(ctx context.Context, field graphql.CollectedField, obj *model.ContentTag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ContentTag_tagId,
		func(ctx context.Context) (any, error) {
			return obj.TagID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ContentTag_tagId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentTag_kind(ctx context.Context, field graphql.CollectedField, obj *model.ContentTag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ContentTag_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind, nil
		},
		nil,
		ec.marshalNContentTagKind2contentᚑservicesᚋgraphᚋmodelᚐContentTagKind,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ContentTag_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContentTagKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentTag_objectId(ctx context.Context, field graphql.CollectedField, obj *model.ContentTag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ContentTag_objectId,
		func(ctx context.Context) (any, error) {
			return obj.ObjectID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ContentTag_objectId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentTag_tag(ctx context.Context, field graphql.CollectedField, obj *model.ContentTag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ContentTag_tag,
		func(ctx context.Context) (any, error) {
			return obj.Tag, nil
		},
		nil,
		ec.marshalOTag2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTag,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ContentTag_tag(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentTag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "slug":
				return ec.fieldContext_Tag_slug(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Flashcard_id(ctx context.Context, field graphql.CollectedField, obj *model.Flashcard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Flashcard_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Flashcard_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Flashcard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Flashcard_setId(ctx context.Context, field graphql.CollectedField, obj *model.Flashcard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Flashcard_setId,
		func(ctx context.Context) (any, error) {
			return obj.SetID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Flashcard_setId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Flashcard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Flashcard_frontText(ctx context.Context, field graphql.CollectedField, obj *model.Flashcard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Flashcard_frontText,
		func(ctx context.Context) (any, error) {
			return obj.FrontText, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Flashcard_frontText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Flashcard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Flashcard_backText(ctx context.Context, field graphql.CollectedField, obj *model.Flashcard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Flashcard_backText,
		func(ctx context.Context) (any, error) {
			return obj.BackText, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Flashcard_backText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Flashcard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Flashcard_frontMediaId(ctx context.Context, field graphql.CollectedField, obj *model.Flashcard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Flashcard_frontMediaId,
		func(ctx context.Context) (any, error) {
			return obj.FrontMediaID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Flashcard_frontMediaId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Flashcard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Flashcard_backMediaId(ctx context.Context, field graphql.CollectedField, obj *model.Flashcard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Flashcard_backMediaId,
		func(ctx context.Context) (any, error) {
			return obj.BackMediaID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Flashcard_backMediaId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Flashcard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Flashcard_ord(ctx context.Context, field graphql.CollectedField, obj *model.Flashcard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Flashcard_ord,
		func(ctx context.Context) (any, error) {
			return obj.Ord, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Flashcard_ord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Flashcard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Flashcard_hints(ctx context.Context, field graphql.CollectedField, obj *model.Flashcard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Flashcard_hints,
		func(ctx context.Context) (any, error) {
			return obj.Hints, nil
		},
		nil,
		ec.marshalOString2ᚕstringᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Flashcard_hints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Flashcard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Flashcard_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Flashcard) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Flashcard_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Flashcard_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Flashcard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardCollection_items(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardCollection_items,
		func(ctx context.Context) (any, error) {
			return obj.Items, nil
		},
		nil,
		ec.marshalNFlashcard2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardCollection_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Flashcard_id(ctx, field)
			case "setId":
				return ec.fieldContext_Flashcard_setId(ctx, field)
			case "frontText":
				return ec.fieldContext_Flashcard_frontText(ctx, field)
			case "backText":
				return ec.fieldContext_Flashcard_backText(ctx, field)
			case "frontMediaId":
				return ec.fieldContext_Flashcard_frontMediaId(ctx, field)
			case "backMediaId":
				return ec.fieldContext_Flashcard_backMediaId(ctx, field)
			case "ord":
				return ec.fieldContext_Flashcard_ord(ctx, field)
			case "hints":
				return ec.fieldContext_Flashcard_hints(ctx, field)
			case "createdAt":
				return ec.fieldContext_Flashcard_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Flashcard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardCollection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardCollection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardCollection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardCollection_page(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardCollection_page,
		func(ctx context.Context) (any, error) {
			return obj.Page, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardCollection_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardCollection_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardCollection_pageSize,
		func(ctx context.Context) (any, error) {
			return obj.PageSize, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardCollection_pageSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSet_id(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSet_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardSet_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSet_title(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSet_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardSet_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSet_description(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSet_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_FlashcardSet_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSet_topicId(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSet_topicId,
		func(ctx context.Context) (any, error) {
			return obj.TopicID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_FlashcardSet_topicId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSet_levelId(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSet_levelId,
		func(ctx context.Context) (any, error) {
			return obj.LevelID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_FlashcardSet_levelId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSet_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSet_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardSet_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSet_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSet_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_FlashcardSet_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSet_tags(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSet_tags,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.FlashcardSet().Tags(ctx, obj)
		},
		nil,
		ec.marshalNTag2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐTagᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardSet_tags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "slug":
				return ec.fieldContext_Tag_slug(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSet_cards(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSet_cards,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.FlashcardSet().Cards(ctx, obj)
		},
		nil,
		ec.marshalNFlashcard2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardSet_cards(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Flashcard_id(ctx, field)
			case "setId":
				return ec.fieldContext_Flashcard_setId(ctx, field)
			case "frontText":
				return ec.fieldContext_Flashcard_frontText(ctx, field)
			case "backText":
				return ec.fieldContext_Flashcard_backText(ctx, field)
			case "frontMediaId":
				return ec.fieldContext_Flashcard_frontMediaId(ctx, field)
			case "backMediaId":
				return ec.fieldContext_Flashcard_backMediaId(ctx, field)
			case "ord":
				return ec.fieldContext_Flashcard_ord(ctx, field)
			case "hints":
				return ec.fieldContext_Flashcard_hints(ctx, field)
			case "createdAt":
				return ec.fieldContext_Flashcard_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Flashcard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSetList_items(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSetList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSetList_items,
		func(ctx context.Context) (any, error) {
			return obj.Items, nil
		},
		nil,
		ec.marshalNFlashcardSet2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardSetList_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSetList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FlashcardSet_id(ctx, field)
			case "title":
				return ec.fieldContext_FlashcardSet_title(ctx, field)
			case "description":
				return ec.fieldContext_FlashcardSet_description(ctx, field)
			case "topicId":
				return ec.fieldContext_FlashcardSet_topicId(ctx, field)
			case "levelId":
				return ec.fieldContext_FlashcardSet_levelId(ctx, field)
			case "createdAt":
				return ec.fieldContext_FlashcardSet_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_FlashcardSet_createdBy(ctx, field)
			case "tags":
				return ec.fieldContext_FlashcardSet_tags(ctx, field)
			case "cards":
				return ec.fieldContext_FlashcardSet_cards(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FlashcardSet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSetList_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSetList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSetList_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardSetList_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSetList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSetList_page(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSetList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSetList_page,
		func(ctx context.Context) (any, error) {
			return obj.Page, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardSetList_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSetList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FlashcardSetList_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.FlashcardSetList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FlashcardSetList_pageSize,
		func(ctx context.Context) (any, error) {
			return obj.PageSize, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FlashcardSetList_pageSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FlashcardSetList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_id(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_name(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_parentId(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_parentId,
		func(ctx context.Context) (any, error) {
			return obj.ParentID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Folder_parentId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_parent(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_parent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Folder().Parent(ctx, obj)
		},
		nil,
		ec.marshalOFolder2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolder,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Folder_parent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "parent":
				return ec.fieldContext_Folder_parent(ctx, field)
			case "depth":
				return ec.fieldContext_Folder_depth(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "childrenCount":
				return ec.fieldContext_Folder_childrenCount(ctx, field)
			case "mediaCount":
				return ec.fieldContext_Folder_mediaCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_depth(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_depth,
		func(ctx context.Context) (any, error) {
			return obj.Depth, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_depth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_children(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_children,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Folder().Children(ctx, obj)
		},
		nil,
		ec.marshalOFolder2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Folder_children(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "parent":
				return ec.fieldContext_Folder_parent(ctx, field)
			case "depth":
				return ec.fieldContext_Folder_depth(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "childrenCount":
				return ec.fieldContext_Folder_childrenCount(ctx, field)
			case "mediaCount":
				return ec.fieldContext_Folder_mediaCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_childrenCount(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_childrenCount,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Folder().ChildrenCount(ctx, obj)
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_childrenCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_mediaCount(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_mediaCount,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Folder().MediaCount(ctx, obj)
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_mediaCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FolderCollection_items(ctx context.Context, field graphql.CollectedField, obj *model.FolderCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FolderCollection_items,
		func(ctx context.Context) (any, error) {
			return obj.Items, nil
		},
		nil,
		ec.marshalNFolder2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FolderCollection_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FolderCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "parent":
				return ec.fieldContext_Folder_parent(ctx, field)
			case "depth":
				return ec.fieldContext_Folder_depth(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "childrenCount":
				return ec.fieldContext_Folder_childrenCount(ctx, field)
			case "mediaCount":
				return ec.fieldContext_Folder_mediaCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FolderCollection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.FolderCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FolderCollection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FolderCollection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FolderCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FolderCollection_page(ctx context.Context, field graphql.CollectedField, obj *model.FolderCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FolderCollection_page,
		func(ctx context.Context) (any, error) {
			return obj.Page, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FolderCollection_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FolderCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FolderCollection_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.FolderCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FolderCollection_pageSize,
		func(ctx context.Context) (any, error) {
			return obj.PageSize, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FolderCollection_pageSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FolderCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FolderTree_folder(ctx context.Context, field graphql.CollectedField, obj *model.FolderTree) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FolderTree_folder,
		func(ctx context.Context) (any, error) {
			return obj.Folder, nil
		},
		nil,
		ec.marshalNFolder2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolder,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FolderTree_folder(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FolderTree",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "parent":
				return ec.fieldContext_Folder_parent(ctx, field)
			case "depth":
				return ec.fieldContext_Folder_depth(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "childrenCount":
				return ec.fieldContext_Folder_childrenCount(ctx, field)
			case "mediaCount":
				return ec.fieldContext_Folder_mediaCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FolderTree_children(ctx context.Context, field graphql.CollectedField, obj *model.FolderTree) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FolderTree_children,
		func(ctx context.Context) (any, error) {
			return obj.Children, nil
		},
		nil,
		ec.marshalNFolderTree2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderTreeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FolderTree_children(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FolderTree",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "folder":
				return ec.fieldContext_FolderTree_folder(ctx, field)
			case "children":
				return ec.fieldContext_FolderTree_children(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FolderTree", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_id(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Lesson_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_code(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_code,
		func(ctx context.Context) (any, error) {
			return obj.Code, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Lesson_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_title(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Lesson_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_description(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Lesson_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_topic(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_topic,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Lesson().Topic(ctx, obj)
		},
		nil,
		ec.marshalOTopic2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTopic,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Lesson_topic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_level(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_level,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Lesson().Level(ctx, obj)
		},
		nil,
		ec.marshalOLevel2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLevel,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Lesson_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Level_id(ctx, field)
			case "code":
				return ec.fieldContext_Level_code(ctx, field)
			case "name":
				return ec.fieldContext_Level_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Level", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_isPublished(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_isPublished,
		func(ctx context.Context) (any, error) {
			return obj.IsPublished, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Lesson_isPublished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_version(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_version,
		func(ctx context.Context) (any, error) {
			return obj.Version, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Lesson_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Lesson_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Lesson_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Lesson_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_publishedAt(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_publishedAt,
		func(ctx context.Context) (any, error) {
			return obj.PublishedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Lesson_publishedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_tags(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_tags,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Lesson().Tags(ctx, obj)
		},
		nil,
		ec.marshalNTag2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐTagᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Lesson_tags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "slug":
				return ec.fieldContext_Tag_slug(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Lesson_sections(ctx context.Context, field graphql.CollectedField, obj *model.Lesson) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Lesson_sections,
		func(ctx context.Context) (any, error) {
			return obj.Sections, nil
		},
		nil,
		ec.marshalNLessonSection2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Lesson_sections(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Lesson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LessonSection_id(ctx, field)
			case "lessonId":
				return ec.fieldContext_LessonSection_lessonId(ctx, field)
			case "ord":
				return ec.fieldContext_LessonSection_ord(ctx, field)
			case "type":
				return ec.fieldContext_LessonSection_type(ctx, field)
			case "body":
				return ec.fieldContext_LessonSection_body(ctx, field)
			case "createdAt":
				return ec.fieldContext_LessonSection_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LessonSection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonCollection_items(ctx context.Context, field graphql.CollectedField, obj *model.LessonCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonCollection_items,
		func(ctx context.Context) (any, error) {
			return obj.Items, nil
		},
		nil,
		ec.marshalNLesson2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonCollection_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lesson_id(ctx, field)
			case "code":
				return ec.fieldContext_Lesson_code(ctx, field)
			case "title":
				return ec.fieldContext_Lesson_title(ctx, field)
			case "description":
				return ec.fieldContext_Lesson_description(ctx, field)
			case "topic":
				return ec.fieldContext_Lesson_topic(ctx, field)
			case "level":
				return ec.fieldContext_Lesson_level(ctx, field)
			case "isPublished":
				return ec.fieldContext_Lesson_isPublished(ctx, field)
			case "version":
				return ec.fieldContext_Lesson_version(ctx, field)
			case "createdBy":
				return ec.fieldContext_Lesson_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lesson_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lesson_updatedAt(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Lesson_publishedAt(ctx, field)
			case "tags":
				return ec.fieldContext_Lesson_tags(ctx, field)
			case "sections":
				return ec.fieldContext_Lesson_sections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lesson", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonCollection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.LessonCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonCollection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonCollection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonCollection_page(ctx context.Context, field graphql.CollectedField, obj *model.LessonCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonCollection_page,
		func(ctx context.Context) (any, error) {
			return obj.Page, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonCollection_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonCollection_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.LessonCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonCollection_pageSize,
		func(ctx context.Context) (any, error) {
			return obj.PageSize, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonCollection_pageSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSection_id(ctx context.Context, field graphql.CollectedField, obj *model.LessonSection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSection_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSection_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSection_lessonId(ctx context.Context, field graphql.CollectedField, obj *model.LessonSection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSection_lessonId,
		func(ctx context.Context) (any, error) {
			return obj.LessonID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSection_lessonId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSection_ord(ctx context.Context, field graphql.CollectedField, obj *model.LessonSection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSection_ord,
		func(ctx context.Context) (any, error) {
			return obj.Ord, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSection_ord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSection_type(ctx context.Context, field graphql.CollectedField, obj *model.LessonSection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSection_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNLessonSectionType2contentᚑservicesᚋgraphᚋmodelᚐLessonSectionType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSection_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LessonSectionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSection_body(ctx context.Context, field graphql.CollectedField, obj *model.LessonSection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSection_body,
		func(ctx context.Context) (any, error) {
			return obj.Body, nil
		},
		nil,
		ec.marshalNMap2map,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSection_body(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSection_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.LessonSection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSection_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSection_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSectionCollection_items(ctx context.Context, field graphql.CollectedField, obj *model.LessonSectionCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSectionCollection_items,
		func(ctx context.Context) (any, error) {
			return obj.Items, nil
		},
		nil,
		ec.marshalNLessonSection2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSectionCollection_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSectionCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LessonSection_id(ctx, field)
			case "lessonId":
				return ec.fieldContext_LessonSection_lessonId(ctx, field)
			case "ord":
				return ec.fieldContext_LessonSection_ord(ctx, field)
			case "type":
				return ec.fieldContext_LessonSection_type(ctx, field)
			case "body":
				return ec.fieldContext_LessonSection_body(ctx, field)
			case "createdAt":
				return ec.fieldContext_LessonSection_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LessonSection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSectionCollection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.LessonSectionCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSectionCollection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSectionCollection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSectionCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSectionCollection_page(ctx context.Context, field graphql.CollectedField, obj *model.LessonSectionCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSectionCollection_page,
		func(ctx context.Context) (any, error) {
			return obj.Page, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSectionCollection_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSectionCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LessonSectionCollection_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.LessonSectionCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_LessonSectionCollection_pageSize,
		func(ctx context.Context) (any, error) {
			return obj.PageSize, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_LessonSectionCollection_pageSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LessonSectionCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Level_id(ctx context.Context, field graphql.CollectedField, obj *model.Level) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Level_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Level_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Level",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Level_code(ctx context.Context, field graphql.CollectedField, obj *model.Level) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Level_code,
		func(ctx context.Context) (any, error) {
			return obj.Code, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Level_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Level",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Level_name(ctx context.Context, field graphql.CollectedField, obj *model.Level) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Level_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Level_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Level",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_id(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_storageKey(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_storageKey,
		func(ctx context.Context) (any, error) {
			return obj.StorageKey, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_storageKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_kind(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind, nil
		},
		nil,
		ec.marshalNMediaKind2contentᚑservicesᚋgraphᚋmodelᚐMediaKind,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MediaKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_mimeType(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_mimeType,
		func(ctx context.Context) (any, error) {
			return obj.MimeType, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_mimeType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_folderId(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_folderId,
		func(ctx context.Context) (any, error) {
			return obj.FolderID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_folderId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_originalName(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_originalName,
		func(ctx context.Context) (any, error) {
			return obj.OriginalName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_originalName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_thumbnailURL(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_thumbnailURL,
		func(ctx context.Context) (any, error) {
			return obj.ThumbnailURL, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_thumbnailURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_bytes(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_bytes,
		func(ctx context.Context) (any, error) {
			return obj.Bytes, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_bytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_durationMs(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_durationMs,
		func(ctx context.Context) (any, error) {
			return obj.DurationMs, nil
		},
		nil,
		ec.marshalOInt2ᚖint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_durationMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_sha256(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_sha256,
		func(ctx context.Context) (any, error) {
			return obj.Sha256, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_sha256(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_uploadedBy(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_uploadedBy,
		func(ctx context.Context) (any, error) {
			return obj.UploadedBy, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_uploadedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAsset_downloadURL(ctx context.Context, field graphql.CollectedField, obj *model.MediaAsset) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAsset_downloadURL,
		func(ctx context.Context) (any, error) {
			return obj.DownloadURL, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAsset_downloadURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAsset",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAssetCollection_items(ctx context.Context, field graphql.CollectedField, obj *model.MediaAssetCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAssetCollection_items,
		func(ctx context.Context) (any, error) {
			return obj.Items, nil
		},
		nil,
		ec.marshalNMediaAsset2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAssetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAssetCollection_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAssetCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MediaAsset_id(ctx, field)
			case "storageKey":
				return ec.fieldContext_MediaAsset_storageKey(ctx, field)
			case "kind":
				return ec.fieldContext_MediaAsset_kind(ctx, field)
			case "mimeType":
				return ec.fieldContext_MediaAsset_mimeType(ctx, field)
			case "folderId":
				return ec.fieldContext_MediaAsset_folderId(ctx, field)
			case "originalName":
				return ec.fieldContext_MediaAsset_originalName(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_MediaAsset_thumbnailURL(ctx, field)
			case "bytes":
				return ec.fieldContext_MediaAsset_bytes(ctx, field)
			case "durationMs":
				return ec.fieldContext_MediaAsset_durationMs(ctx, field)
			case "sha256":
				return ec.fieldContext_MediaAsset_sha256(ctx, field)
			case "createdAt":
				return ec.fieldContext_MediaAsset_createdAt(ctx, field)
			case "uploadedBy":
				return ec.fieldContext_MediaAsset_uploadedBy(ctx, field)
			case "downloadURL":
				return ec.fieldContext_MediaAsset_downloadURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaAsset", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAssetCollection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.MediaAssetCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAssetCollection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAssetCollection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAssetCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAssetCollection_page(ctx context.Context, field graphql.CollectedField, obj *model.MediaAssetCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAssetCollection_page,
		func(ctx context.Context) (any, error) {
			return obj.Page, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAssetCollection_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAssetCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaAssetCollection_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.MediaAssetCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MediaAssetCollection_pageSize,
		func(ctx context.Context) (any, error) {
			return obj.PageSize, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MediaAssetCollection_pageSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaAssetCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createTopic,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateTopic(ctx, fc.Args["input"].(model.CreateTopicInput))
		},
		nil,
		ec.marshalNTopic2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTopic,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTopic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateTopic,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateTopic(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateTopicInput))
		},
		nil,
		ec.marshalNTopic2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTopic,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTopic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteTopic,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteTopic(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTopic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createLevel,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateLevel(ctx, fc.Args["input"].(model.CreateLevelInput))
		},
		nil,
		ec.marshalNLevel2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLevel,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Level_id(ctx, field)
			case "code":
				return ec.fieldContext_Level_code(ctx, field)
			case "name":
				return ec.fieldContext_Level_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Level", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateLevel,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateLevel(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateLevelInput))
		},
		nil,
		ec.marshalNLevel2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLevel,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Level_id(ctx, field)
			case "code":
				return ec.fieldContext_Level_code(ctx, field)
			case "name":
				return ec.fieldContext_Level_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Level", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteLevel,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteLevel(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createTag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateTag(ctx, fc.Args["input"].(model.CreateTagInput))
		},
		nil,
		ec.marshalNTag2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTag,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "slug":
				return ec.fieldContext_Tag_slug(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateTag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateTag(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateTagInput))
		},
		nil,
		ec.marshalNTag2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTag,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "slug":
				return ec.fieldContext_Tag_slug(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteTag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteTag(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createFolder,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateFolder(ctx, fc.Args["input"].(model.CreateFolderInput))
		},
		nil,
		ec.marshalNFolder2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolder,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createFolder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "parent":
				return ec.fieldContext_Folder_parent(ctx, field)
			case "depth":
				return ec.fieldContext_Folder_depth(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "childrenCount":
				return ec.fieldContext_Folder_childrenCount(ctx, field)
			case "mediaCount":
				return ec.fieldContext_Folder_mediaCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createFolder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateFolder,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateFolder(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateFolderInput))
		},
		nil,
		ec.marshalNFolder2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolder,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateFolder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "parent":
				return ec.fieldContext_Folder_parent(ctx, field)
			case "depth":
				return ec.fieldContext_Folder_depth(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "childrenCount":
				return ec.fieldContext_Folder_childrenCount(ctx, field)
			case "mediaCount":
				return ec.fieldContext_Folder_mediaCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateFolder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteFolder,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteFolder(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteFolder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteFolder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_uploadMedia,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UploadMedia(ctx, fc.Args["input"].(model.UploadMediaInput))
		},
		nil,
		ec.marshalNMediaAsset2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAsset,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_uploadMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MediaAsset_id(ctx, field)
			case "storageKey":
				return ec.fieldContext_MediaAsset_storageKey(ctx, field)
			case "kind":
				return ec.fieldContext_MediaAsset_kind(ctx, field)
			case "mimeType":
				return ec.fieldContext_MediaAsset_mimeType(ctx, field)
			case "folderId":
				return ec.fieldContext_MediaAsset_folderId(ctx, field)
			case "originalName":
				return ec.fieldContext_MediaAsset_originalName(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_MediaAsset_thumbnailURL(ctx, field)
			case "bytes":
				return ec.fieldContext_MediaAsset_bytes(ctx, field)
			case "durationMs":
				return ec.fieldContext_MediaAsset_durationMs(ctx, field)
			case "sha256":
				return ec.fieldContext_MediaAsset_sha256(ctx, field)
			case "createdAt":
				return ec.fieldContext_MediaAsset_createdAt(ctx, field)
			case "uploadedBy":
				return ec.fieldContext_MediaAsset_uploadedBy(ctx, field)
			case "downloadURL":
				return ec.fieldContext_MediaAsset_downloadURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaAsset", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadMedia_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteMedia,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteMedia(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMedia_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createLesson,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateLesson(ctx, fc.Args["input"].(model.CreateLessonInput))
		},
		nil,
		ec.marshalNLesson2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLesson,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createLesson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lesson_id(ctx, field)
			case "code":
				return ec.fieldContext_Lesson_code(ctx, field)
			case "title":
				return ec.fieldContext_Lesson_title(ctx, field)
			case "description":
				return ec.fieldContext_Lesson_description(ctx, field)
			case "topic":
				return ec.fieldContext_Lesson_topic(ctx, field)
			case "level":
				return ec.fieldContext_Lesson_level(ctx, field)
			case "isPublished":
				return ec.fieldContext_Lesson_isPublished(ctx, field)
			case "version":
				return ec.fieldContext_Lesson_version(ctx, field)
			case "createdBy":
				return ec.fieldContext_Lesson_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lesson_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lesson_updatedAt(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Lesson_publishedAt(ctx, field)
			case "tags":
				return ec.fieldContext_Lesson_tags(ctx, field)
			case "sections":
				return ec.fieldContext_Lesson_sections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lesson", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLesson_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateLesson,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateLesson(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateLessonInput))
		},
		nil,
		ec.marshalNLesson2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLesson,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateLesson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lesson_id(ctx, field)
			case "code":
				return ec.fieldContext_Lesson_code(ctx, field)
			case "title":
				return ec.fieldContext_Lesson_title(ctx, field)
			case "description":
				return ec.fieldContext_Lesson_description(ctx, field)
			case "topic":
				return ec.fieldContext_Lesson_topic(ctx, field)
			case "level":
				return ec.fieldContext_Lesson_level(ctx, field)
			case "isPublished":
				return ec.fieldContext_Lesson_isPublished(ctx, field)
			case "version":
				return ec.fieldContext_Lesson_version(ctx, field)
			case "createdBy":
				return ec.fieldContext_Lesson_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lesson_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lesson_updatedAt(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Lesson_publishedAt(ctx, field)
			case "tags":
				return ec.fieldContext_Lesson_tags(ctx, field)
			case "sections":
				return ec.fieldContext_Lesson_sections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lesson", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLesson_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteLesson,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteLesson(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteLesson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLesson_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_publishLesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_publishLesson,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().PublishLesson(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNLesson2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLesson,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_publishLesson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lesson_id(ctx, field)
			case "code":
				return ec.fieldContext_Lesson_code(ctx, field)
			case "title":
				return ec.fieldContext_Lesson_title(ctx, field)
			case "description":
				return ec.fieldContext_Lesson_description(ctx, field)
			case "topic":
				return ec.fieldContext_Lesson_topic(ctx, field)
			case "level":
				return ec.fieldContext_Lesson_level(ctx, field)
			case "isPublished":
				return ec.fieldContext_Lesson_isPublished(ctx, field)
			case "version":
				return ec.fieldContext_Lesson_version(ctx, field)
			case "createdBy":
				return ec.fieldContext_Lesson_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lesson_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lesson_updatedAt(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Lesson_publishedAt(ctx, field)
			case "tags":
				return ec.fieldContext_Lesson_tags(ctx, field)
			case "sections":
				return ec.fieldContext_Lesson_sections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lesson", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_publishLesson_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unpublishLesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_unpublishLesson,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UnpublishLesson(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNLesson2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLesson,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_unpublishLesson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lesson_id(ctx, field)
			case "code":
				return ec.fieldContext_Lesson_code(ctx, field)
			case "title":
				return ec.fieldContext_Lesson_title(ctx, field)
			case "description":
				return ec.fieldContext_Lesson_description(ctx, field)
			case "topic":
				return ec.fieldContext_Lesson_topic(ctx, field)
			case "level":
				return ec.fieldContext_Lesson_level(ctx, field)
			case "isPublished":
				return ec.fieldContext_Lesson_isPublished(ctx, field)
			case "version":
				return ec.fieldContext_Lesson_version(ctx, field)
			case "createdBy":
				return ec.fieldContext_Lesson_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lesson_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lesson_updatedAt(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Lesson_publishedAt(ctx, field)
			case "tags":
				return ec.fieldContext_Lesson_tags(ctx, field)
			case "sections":
				return ec.fieldContext_Lesson_sections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lesson", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unpublishLesson_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLessonSection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createLessonSection,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateLessonSection(ctx, fc.Args["lessonId"].(string), fc.Args["input"].(model.CreateLessonSectionInput))
		},
		nil,
		ec.marshalNLessonSection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createLessonSection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LessonSection_id(ctx, field)
			case "lessonId":
				return ec.fieldContext_LessonSection_lessonId(ctx, field)
			case "ord":
				return ec.fieldContext_LessonSection_ord(ctx, field)
			case "type":
				return ec.fieldContext_LessonSection_type(ctx, field)
			case "body":
				return ec.fieldContext_LessonSection_body(ctx, field)
			case "createdAt":
				return ec.fieldContext_LessonSection_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LessonSection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLessonSection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLessonSection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateLessonSection,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateLessonSection(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateLessonSectionInput))
		},
		nil,
		ec.marshalNLessonSection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateLessonSection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LessonSection_id(ctx, field)
			case "lessonId":
				return ec.fieldContext_LessonSection_lessonId(ctx, field)
			case "ord":
				return ec.fieldContext_LessonSection_ord(ctx, field)
			case "type":
				return ec.fieldContext_LessonSection_type(ctx, field)
			case "body":
				return ec.fieldContext_LessonSection_body(ctx, field)
			case "createdAt":
				return ec.fieldContext_LessonSection_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LessonSection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLessonSection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLessonSection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteLessonSection,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteLessonSection(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteLessonSection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLessonSection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createFlashcardSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createFlashcardSet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateFlashcardSet(ctx, fc.Args["input"].(model.CreateFlashcardSetInput))
		},
		nil,
		ec.marshalNFlashcardSet2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createFlashcardSet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FlashcardSet_id(ctx, field)
			case "title":
				return ec.fieldContext_FlashcardSet_title(ctx, field)
			case "description":
				return ec.fieldContext_FlashcardSet_description(ctx, field)
			case "topicId":
				return ec.fieldContext_FlashcardSet_topicId(ctx, field)
			case "levelId":
				return ec.fieldContext_FlashcardSet_levelId(ctx, field)
			case "createdAt":
				return ec.fieldContext_FlashcardSet_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_FlashcardSet_createdBy(ctx, field)
			case "tags":
				return ec.fieldContext_FlashcardSet_tags(ctx, field)
			case "cards":
				return ec.fieldContext_FlashcardSet_cards(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FlashcardSet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createFlashcardSet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addFlashcard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_addFlashcard,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AddFlashcard(ctx, fc.Args["input"].(model.AddFlashcardInput))
		},
		nil,
		ec.marshalNFlashcard2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcard,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_addFlashcard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Flashcard_id(ctx, field)
			case "setId":
				return ec.fieldContext_Flashcard_setId(ctx, field)
			case "frontText":
				return ec.fieldContext_Flashcard_frontText(ctx, field)
			case "backText":
				return ec.fieldContext_Flashcard_backText(ctx, field)
			case "frontMediaId":
				return ec.fieldContext_Flashcard_frontMediaId(ctx, field)
			case "backMediaId":
				return ec.fieldContext_Flashcard_backMediaId(ctx, field)
			case "ord":
				return ec.fieldContext_Flashcard_ord(ctx, field)
			case "hints":
				return ec.fieldContext_Flashcard_hints(ctx, field)
			case "createdAt":
				return ec.fieldContext_Flashcard_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Flashcard", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addFlashcard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createQuiz,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateQuiz(ctx, fc.Args["input"].(model.CreateQuizInput))
		},
		nil,
		ec.marshalNQuiz2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuiz,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Quiz_id(ctx, field)
			case "lessonId":
				return ec.fieldContext_Quiz_lessonId(ctx, field)
			case "title":
				return ec.fieldContext_Quiz_title(ctx, field)
			case "description":
				return ec.fieldContext_Quiz_description(ctx, field)
			case "totalPoints":
				return ec.fieldContext_Quiz_totalPoints(ctx, field)
			case "timeLimitS":
				return ec.fieldContext_Quiz_timeLimitS(ctx, field)
			case "createdAt":
				return ec.fieldContext_Quiz_createdAt(ctx, field)
			case "topic":
				return ec.fieldContext_Quiz_topic(ctx, field)
			case "level":
				return ec.fieldContext_Quiz_level(ctx, field)
			case "tags":
				return ec.fieldContext_Quiz_tags(ctx, field)
			case "questions":
				return ec.fieldContext_Quiz_questions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quiz", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateQuiz,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateQuiz(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateQuizInput))
		},
		nil,
		ec.marshalNQuiz2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuiz,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Quiz_id(ctx, field)
			case "lessonId":
				return ec.fieldContext_Quiz_lessonId(ctx, field)
			case "title":
				return ec.fieldContext_Quiz_title(ctx, field)
			case "description":
				return ec.fieldContext_Quiz_description(ctx, field)
			case "totalPoints":
				return ec.fieldContext_Quiz_totalPoints(ctx, field)
			case "timeLimitS":
				return ec.fieldContext_Quiz_timeLimitS(ctx, field)
			case "createdAt":
				return ec.fieldContext_Quiz_createdAt(ctx, field)
			case "topic":
				return ec.fieldContext_Quiz_topic(ctx, field)
			case "level":
				return ec.fieldContext_Quiz_level(ctx, field)
			case "tags":
				return ec.fieldContext_Quiz_tags(ctx, field)
			case "questions":
				return ec.fieldContext_Quiz_questions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quiz", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteQuiz,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteQuiz(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addQuizQuestion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_addQuizQuestion,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AddQuizQuestion(ctx, fc.Args["quizId"].(string), fc.Args["input"].(model.CreateQuizQuestionInput))
		},
		nil,
		ec.marshalNQuizQuestion2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestion,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_addQuizQuestion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuizQuestion_id(ctx, field)
			case "quizId":
				return ec.fieldContext_QuizQuestion_quizId(ctx, field)
			case "ord":
				return ec.fieldContext_QuizQuestion_ord(ctx, field)
			case "type":
				return ec.fieldContext_QuizQuestion_type(ctx, field)
			case "prompt":
				return ec.fieldContext_QuizQuestion_prompt(ctx, field)
			case "promptMedia":
				return ec.fieldContext_QuizQuestion_promptMedia(ctx, field)
			case "points":
				return ec.fieldContext_QuizQuestion_points(ctx, field)
			case "metadata":
				return ec.fieldContext_QuizQuestion_metadata(ctx, field)
			case "options":
				return ec.fieldContext_QuizQuestion_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuizQuestion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addQuizQuestion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addQuestionOption(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_addQuestionOption,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AddQuestionOption(ctx, fc.Args["questionId"].(string), fc.Args["input"].(model.CreateQuestionOptionInput))
		},
		nil,
		ec.marshalNQuestionOption2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuestionOption,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_addQuestionOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionOption_id(ctx, field)
			case "questionId":
				return ec.fieldContext_QuestionOption_questionId(ctx, field)
			case "ord":
				return ec.fieldContext_QuestionOption_ord(ctx, field)
			case "label":
				return ec.fieldContext_QuestionOption_label(ctx, field)
			case "isCorrect":
				return ec.fieldContext_QuestionOption_isCorrect(ctx, field)
			case "feedback":
				return ec.fieldContext_QuestionOption_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionOption", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addQuestionOption_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateQuestionOption(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateQuestionOption,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateQuestionOption(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateQuestionOptionInput))
		},
		nil,
		ec.marshalNQuestionOption2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuestionOption,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateQuestionOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionOption_id(ctx, field)
			case "questionId":
				return ec.fieldContext_QuestionOption_questionId(ctx, field)
			case "ord":
				return ec.fieldContext_QuestionOption_ord(ctx, field)
			case "label":
				return ec.fieldContext_QuestionOption_label(ctx, field)
			case "isCorrect":
				return ec.fieldContext_QuestionOption_isCorrect(ctx, field)
			case "feedback":
				return ec.fieldContext_QuestionOption_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionOption", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateQuestionOption_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteQuestionOption(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteQuestionOption,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteQuestionOption(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteQuestionOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteQuestionOption_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addContentTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_addContentTag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AddContentTag(ctx, fc.Args["input"].(model.ContentTagInput))
		},
		nil,
		ec.marshalNContentTag2ᚖcontentᚑservicesᚋgraphᚋmodelᚐContentTag,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_addContentTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tagId":
				return ec.fieldContext_ContentTag_tagId(ctx, field)
			case "kind":
				return ec.fieldContext_ContentTag_kind(ctx, field)
			case "objectId":
				return ec.fieldContext_ContentTag_objectId(ctx, field)
			case "tag":
				return ec.fieldContext_ContentTag_tag(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentTag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addContentTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeContentTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_removeContentTag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RemoveContentTag(ctx, fc.Args["input"].(model.ContentTagInput))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_removeContentTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeContentTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_health(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_health,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Health(ctx)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_health(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_topic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_topic,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Topic(ctx, fc.Args["id"].(*string), fc.Args["slug"].(*string))
		},
		nil,
		ec.marshalOTopic2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTopic,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_topic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_topic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_topics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_topics,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Topics(ctx, fc.Args["search"].(*string))
		},
		nil,
		ec.marshalNTopic2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐTopicᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_topics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_topics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_level(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_level,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Level(ctx, fc.Args["id"].(*string), fc.Args["code"].(*string))
		},
		nil,
		ec.marshalOLevel2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLevel,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_level(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Level_id(ctx, field)
			case "code":
				return ec.fieldContext_Level_code(ctx, field)
			case "name":
				return ec.fieldContext_Level_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Level", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_level_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_levels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_levels,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Levels(ctx, fc.Args["search"].(*string))
		},
		nil,
		ec.marshalNLevel2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐLevelᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_levels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Level_id(ctx, field)
			case "code":
				return ec.fieldContext_Level_code(ctx, field)
			case "name":
				return ec.fieldContext_Level_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Level", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_levels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_tag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Tag(ctx, fc.Args["id"].(*string), fc.Args["slug"].(*string))
		},
		nil,
		ec.marshalOTag2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTag,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_tag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "slug":
				return ec.fieldContext_Tag_slug(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_tags,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Tags(ctx, fc.Args["search"].(*string))
		},
		nil,
		ec.marshalNTag2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐTagᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "slug":
				return ec.fieldContext_Tag_slug(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tags_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_folder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_folder,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Folder(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOFolder2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolder,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_folder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "parent":
				return ec.fieldContext_Folder_parent(ctx, field)
			case "depth":
				return ec.fieldContext_Folder_depth(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "childrenCount":
				return ec.fieldContext_Folder_childrenCount(ctx, field)
			case "mediaCount":
				return ec.fieldContext_Folder_mediaCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_folder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_folders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_folders,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Folders(ctx, fc.Args["filter"].(*model.FolderFilterInput), fc.Args["page"].(*int), fc.Args["pageSize"].(*int), fc.Args["orderBy"].(*model.FolderOrderInput))
		},
		nil,
		ec.marshalNFolderCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderCollection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_folders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_FolderCollection_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_FolderCollection_totalCount(ctx, field)
			case "page":
				return ec.fieldContext_FolderCollection_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_FolderCollection_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FolderCollection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_folders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_rootFolders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_rootFolders,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().RootFolders(ctx)
		},
		nil,
		ec.marshalNFolder2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_rootFolders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "parent":
				return ec.fieldContext_Folder_parent(ctx, field)
			case "depth":
				return ec.fieldContext_Folder_depth(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "childrenCount":
				return ec.fieldContext_Folder_childrenCount(ctx, field)
			case "mediaCount":
				return ec.fieldContext_Folder_mediaCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_folderTree(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_folderTree,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FolderTree(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNFolderTree2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderTree,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_folderTree(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "folder":
				return ec.fieldContext_FolderTree_folder(ctx, field)
			case "children":
				return ec.fieldContext_FolderTree_children(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FolderTree", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_folderTree_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_folderPath(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_folderPath,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FolderPath(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNFolder2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_folderPath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "parent":
				return ec.fieldContext_Folder_parent(ctx, field)
			case "depth":
				return ec.fieldContext_Folder_depth(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "childrenCount":
				return ec.fieldContext_Folder_childrenCount(ctx, field)
			case "mediaCount":
				return ec.fieldContext_Folder_mediaCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_folderPath_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mediaAsset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_mediaAsset,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MediaAsset(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOMediaAsset2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAsset,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_mediaAsset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MediaAsset_id(ctx, field)
			case "storageKey":
				return ec.fieldContext_MediaAsset_storageKey(ctx, field)
			case "kind":
				return ec.fieldContext_MediaAsset_kind(ctx, field)
			case "mimeType":
				return ec.fieldContext_MediaAsset_mimeType(ctx, field)
			case "folderId":
				return ec.fieldContext_MediaAsset_folderId(ctx, field)
			case "originalName":
				return ec.fieldContext_MediaAsset_originalName(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_MediaAsset_thumbnailURL(ctx, field)
			case "bytes":
				return ec.fieldContext_MediaAsset_bytes(ctx, field)
			case "durationMs":
				return ec.fieldContext_MediaAsset_durationMs(ctx, field)
			case "sha256":
				return ec.fieldContext_MediaAsset_sha256(ctx, field)
			case "createdAt":
				return ec.fieldContext_MediaAsset_createdAt(ctx, field)
			case "uploadedBy":
				return ec.fieldContext_MediaAsset_uploadedBy(ctx, field)
			case "downloadURL":
				return ec.fieldContext_MediaAsset_downloadURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaAsset", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mediaAsset_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mediaAssets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_mediaAssets,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MediaAssets(ctx, fc.Args["ids"].([]string))
		},
		nil,
		ec.marshalNMediaAsset2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAssetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_mediaAssets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MediaAsset_id(ctx, field)
			case "storageKey":
				return ec.fieldContext_MediaAsset_storageKey(ctx, field)
			case "kind":
				return ec.fieldContext_MediaAsset_kind(ctx, field)
			case "mimeType":
				return ec.fieldContext_MediaAsset_mimeType(ctx, field)
			case "folderId":
				return ec.fieldContext_MediaAsset_folderId(ctx, field)
			case "originalName":
				return ec.fieldContext_MediaAsset_originalName(ctx, field)
			case "thumbnailURL":
				return ec.fieldContext_MediaAsset_thumbnailURL(ctx, field)
			case "bytes":
				return ec.fieldContext_MediaAsset_bytes(ctx, field)
			case "durationMs":
				return ec.fieldContext_MediaAsset_durationMs(ctx, field)
			case "sha256":
				return ec.fieldContext_MediaAsset_sha256(ctx, field)
			case "createdAt":
				return ec.fieldContext_MediaAsset_createdAt(ctx, field)
			case "uploadedBy":
				return ec.fieldContext_MediaAsset_uploadedBy(ctx, field)
			case "downloadURL":
				return ec.fieldContext_MediaAsset_downloadURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaAsset", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mediaAssets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mediaAssetCollection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_mediaAssetCollection,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MediaAssetCollection(ctx, fc.Args["filter"].(*model.MediaAssetFilterInput), fc.Args["page"].(*int), fc.Args["pageSize"].(*int), fc.Args["orderBy"].(*model.MediaAssetOrderInput))
		},
		nil,
		ec.marshalNMediaAssetCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAssetCollection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_mediaAssetCollection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_MediaAssetCollection_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_MediaAssetCollection_totalCount(ctx, field)
			case "page":
				return ec.fieldContext_MediaAssetCollection_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_MediaAssetCollection_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaAssetCollection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mediaAssetCollection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_lesson(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_lesson,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Lesson(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOLesson2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLesson,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_lesson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lesson_id(ctx, field)
			case "code":
				return ec.fieldContext_Lesson_code(ctx, field)
			case "title":
				return ec.fieldContext_Lesson_title(ctx, field)
			case "description":
				return ec.fieldContext_Lesson_description(ctx, field)
			case "topic":
				return ec.fieldContext_Lesson_topic(ctx, field)
			case "level":
				return ec.fieldContext_Lesson_level(ctx, field)
			case "isPublished":
				return ec.fieldContext_Lesson_isPublished(ctx, field)
			case "version":
				return ec.fieldContext_Lesson_version(ctx, field)
			case "createdBy":
				return ec.fieldContext_Lesson_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lesson_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lesson_updatedAt(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Lesson_publishedAt(ctx, field)
			case "tags":
				return ec.fieldContext_Lesson_tags(ctx, field)
			case "sections":
				return ec.fieldContext_Lesson_sections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lesson", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lesson_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_lessonByCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_lessonByCode,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().LessonByCode(ctx, fc.Args["code"].(string))
		},
		nil,
		ec.marshalOLesson2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLesson,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_lessonByCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Lesson_id(ctx, field)
			case "code":
				return ec.fieldContext_Lesson_code(ctx, field)
			case "title":
				return ec.fieldContext_Lesson_title(ctx, field)
			case "description":
				return ec.fieldContext_Lesson_description(ctx, field)
			case "topic":
				return ec.fieldContext_Lesson_topic(ctx, field)
			case "level":
				return ec.fieldContext_Lesson_level(ctx, field)
			case "isPublished":
				return ec.fieldContext_Lesson_isPublished(ctx, field)
			case "version":
				return ec.fieldContext_Lesson_version(ctx, field)
			case "createdBy":
				return ec.fieldContext_Lesson_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_Lesson_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Lesson_updatedAt(ctx, field)
			case "publishedAt":
				return ec.fieldContext_Lesson_publishedAt(ctx, field)
			case "tags":
				return ec.fieldContext_Lesson_tags(ctx, field)
			case "sections":
				return ec.fieldContext_Lesson_sections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Lesson", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lessonByCode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_quiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_quiz,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Quiz(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOQuiz2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuiz,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_quiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Quiz_id(ctx, field)
			case "lessonId":
				return ec.fieldContext_Quiz_lessonId(ctx, field)
			case "title":
				return ec.fieldContext_Quiz_title(ctx, field)
			case "description":
				return ec.fieldContext_Quiz_description(ctx, field)
			case "totalPoints":
				return ec.fieldContext_Quiz_totalPoints(ctx, field)
			case "timeLimitS":
				return ec.fieldContext_Quiz_timeLimitS(ctx, field)
			case "createdAt":
				return ec.fieldContext_Quiz_createdAt(ctx, field)
			case "topic":
				return ec.fieldContext_Quiz_topic(ctx, field)
			case "level":
				return ec.fieldContext_Quiz_level(ctx, field)
			case "tags":
				return ec.fieldContext_Quiz_tags(ctx, field)
			case "questions":
				return ec.fieldContext_Quiz_questions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quiz", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_quiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_quizzes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_quizzes,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Quizzes(ctx, fc.Args["lessonId"].(*string), fc.Args["topicId"].(*string), fc.Args["levelId"].(*string), fc.Args["search"].(*string), fc.Args["page"].(*int), fc.Args["pageSize"].(*int), fc.Args["orderBy"].(*model.QuizOrderInput))
		},
		nil,
		ec.marshalNQuizCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizCollection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_quizzes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_QuizCollection_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_QuizCollection_totalCount(ctx, field)
			case "page":
				return ec.fieldContext_QuizCollection_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_QuizCollection_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuizCollection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_quizzes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_quizQuestions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_quizQuestions,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().QuizQuestions(ctx, fc.Args["quizId"].(string), fc.Args["filter"].(*model.QuizQuestionFilterInput), fc.Args["page"].(*int), fc.Args["pageSize"].(*int), fc.Args["orderBy"].(*model.QuizQuestionOrderInput))
		},
		nil,
		ec.marshalNQuizQuestionCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestionCollection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_quizQuestions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_QuizQuestionCollection_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_QuizQuestionCollection_totalCount(ctx, field)
			case "page":
				return ec.fieldContext_QuizQuestionCollection_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_QuizQuestionCollection_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuizQuestionCollection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_quizQuestions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_flashcardSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_flashcardSet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FlashcardSet(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOFlashcardSet2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSet,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_flashcardSet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FlashcardSet_id(ctx, field)
			case "title":
				return ec.fieldContext_FlashcardSet_title(ctx, field)
			case "description":
				return ec.fieldContext_FlashcardSet_description(ctx, field)
			case "topicId":
				return ec.fieldContext_FlashcardSet_topicId(ctx, field)
			case "levelId":
				return ec.fieldContext_FlashcardSet_levelId(ctx, field)
			case "createdAt":
				return ec.fieldContext_FlashcardSet_createdAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_FlashcardSet_createdBy(ctx, field)
			case "tags":
				return ec.fieldContext_FlashcardSet_tags(ctx, field)
			case "cards":
				return ec.fieldContext_FlashcardSet_cards(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FlashcardSet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_flashcardSet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_flashcardSets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_flashcardSets,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FlashcardSets(ctx, fc.Args["filter"].(*model.FlashcardSetFilterInput), fc.Args["page"].(*int), fc.Args["pageSize"].(*int), fc.Args["orderBy"].(*model.FlashcardSetOrderInput))
		},
		nil,
		ec.marshalNFlashcardSetList2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSetList,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_flashcardSets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_FlashcardSetList_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_FlashcardSetList_totalCount(ctx, field)
			case "page":
				return ec.fieldContext_FlashcardSetList_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_FlashcardSetList_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FlashcardSetList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_flashcardSets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_flashcards(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_flashcards,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Flashcards(ctx, fc.Args["setId"].(string), fc.Args["filter"].(*model.FlashcardFilterInput), fc.Args["page"].(*int), fc.Args["pageSize"].(*int), fc.Args["orderBy"].(*model.FlashcardOrderInput))
		},
		nil,
		ec.marshalNFlashcardCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardCollection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_flashcards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_FlashcardCollection_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_FlashcardCollection_totalCount(ctx, field)
			case "page":
				return ec.fieldContext_FlashcardCollection_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_FlashcardCollection_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FlashcardCollection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_flashcards_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_lessons(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_lessons,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Lessons(ctx, fc.Args["filter"].(*model.LessonFilterInput), fc.Args["page"].(*int), fc.Args["pageSize"].(*int), fc.Args["orderBy"].(*model.LessonOrderInput))
		},
		nil,
		ec.marshalNLessonCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonCollection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_lessons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_LessonCollection_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_LessonCollection_totalCount(ctx, field)
			case "page":
				return ec.fieldContext_LessonCollection_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_LessonCollection_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LessonCollection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lessons_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_lessonSections(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_lessonSections,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().LessonSections(ctx, fc.Args["lessonId"].(string), fc.Args["filter"].(*model.LessonSectionFilterInput), fc.Args["page"].(*int), fc.Args["pageSize"].(*int), fc.Args["orderBy"].(*model.LessonSectionOrderInput))
		},
		nil,
		ec.marshalNLessonSectionCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionCollection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_lessonSections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_LessonSectionCollection_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_LessonSectionCollection_totalCount(ctx, field)
			case "page":
				return ec.fieldContext_LessonSectionCollection_page(ctx, field)
			case "pageSize":
				return ec.fieldContext_LessonSectionCollection_pageSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LessonSectionCollection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_lessonSections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionOption_id(ctx context.Context, field graphql.CollectedField, obj *model.QuestionOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuestionOption_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuestionOption_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionOption_questionId(ctx context.Context, field graphql.CollectedField, obj *model.QuestionOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuestionOption_questionId,
		func(ctx context.Context) (any, error) {
			return obj.QuestionID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuestionOption_questionId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionOption_ord(ctx context.Context, field graphql.CollectedField, obj *model.QuestionOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuestionOption_ord,
		func(ctx context.Context) (any, error) {
			return obj.Ord, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuestionOption_ord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionOption_label(ctx context.Context, field graphql.CollectedField, obj *model.QuestionOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuestionOption_label,
		func(ctx context.Context) (any, error) {
			return obj.Label, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuestionOption_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionOption_isCorrect(ctx context.Context, field graphql.CollectedField, obj *model.QuestionOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuestionOption_isCorrect,
		func(ctx context.Context) (any, error) {
			return obj.IsCorrect, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuestionOption_isCorrect(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionOption_feedback(ctx context.Context, field graphql.CollectedField, obj *model.QuestionOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuestionOption_feedback,
		func(ctx context.Context) (any, error) {
			return obj.Feedback, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_QuestionOption_feedback(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_id(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Quiz_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_lessonId(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_lessonId,
		func(ctx context.Context) (any, error) {
			return obj.LessonID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Quiz_lessonId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_title(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Quiz_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_description(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Quiz_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_totalPoints(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_totalPoints,
		func(ctx context.Context) (any, error) {
			return obj.TotalPoints, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Quiz_totalPoints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_timeLimitS(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_timeLimitS,
		func(ctx context.Context) (any, error) {
			return obj.TimeLimitS, nil
		},
		nil,
		ec.marshalOInt2ᚖint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Quiz_timeLimitS(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Quiz_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_topic(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_topic,
		func(ctx context.Context) (any, error) {
			return obj.Topic, nil
		},
		nil,
		ec.marshalOTopic2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTopic,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Quiz_topic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "slug":
				return ec.fieldContext_Topic_slug(ctx, field)
			case "name":
				return ec.fieldContext_Topic_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_level(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_level,
		func(ctx context.Context) (any, error) {
			return obj.Level, nil
		},
		nil,
		ec.marshalOLevel2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLevel,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Quiz_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Level_id(ctx, field)
			case "code":
				return ec.fieldContext_Level_code(ctx, field)
			case "name":
				return ec.fieldContext_Level_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Level", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_tags(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_tags,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Quiz().Tags(ctx, obj)
		},
		nil,
		ec.marshalNTag2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐTagᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Quiz_tags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "slug":
				return ec.fieldContext_Tag_slug(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_questions(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Quiz_questions,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Quiz().Questions(ctx, obj)
		},
		nil,
		ec.marshalNQuizQuestion2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Quiz_questions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuizQuestion_id(ctx, field)
			case "quizId":
				return ec.fieldContext_QuizQuestion_quizId(ctx, field)
			case "ord":
				return ec.fieldContext_QuizQuestion_ord(ctx, field)
			case "type":
				return ec.fieldContext_QuizQuestion_type(ctx, field)
			case "prompt":
				return ec.fieldContext_QuizQuestion_prompt(ctx, field)
			case "promptMedia":
				return ec.fieldContext_QuizQuestion_promptMedia(ctx, field)
			case "points":
				return ec.fieldContext_QuizQuestion_points(ctx, field)
			case "metadata":
				return ec.fieldContext_QuizQuestion_metadata(ctx, field)
			case "options":
				return ec.fieldContext_QuizQuestion_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuizQuestion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizCollection_items(ctx context.Context, field graphql.CollectedField, obj *model.QuizCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizCollection_items,
		func(ctx context.Context) (any, error) {
			return obj.Items, nil
		},
		nil,
		ec.marshalNQuiz2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizCollection_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Quiz_id(ctx, field)
			case "lessonId":
				return ec.fieldContext_Quiz_lessonId(ctx, field)
			case "title":
				return ec.fieldContext_Quiz_title(ctx, field)
			case "description":
				return ec.fieldContext_Quiz_description(ctx, field)
			case "totalPoints":
				return ec.fieldContext_Quiz_totalPoints(ctx, field)
			case "timeLimitS":
				return ec.fieldContext_Quiz_timeLimitS(ctx, field)
			case "createdAt":
				return ec.fieldContext_Quiz_createdAt(ctx, field)
			case "topic":
				return ec.fieldContext_Quiz_topic(ctx, field)
			case "level":
				return ec.fieldContext_Quiz_level(ctx, field)
			case "tags":
				return ec.fieldContext_Quiz_tags(ctx, field)
			case "questions":
				return ec.fieldContext_Quiz_questions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quiz", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizCollection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.QuizCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizCollection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizCollection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizCollection_page(ctx context.Context, field graphql.CollectedField, obj *model.QuizCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizCollection_page,
		func(ctx context.Context) (any, error) {
			return obj.Page, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizCollection_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizCollection_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.QuizCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizCollection_pageSize,
		func(ctx context.Context) (any, error) {
			return obj.PageSize, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizCollection_pageSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestion_id(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestion_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestion_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestion_quizId(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestion_quizId,
		func(ctx context.Context) (any, error) {
			return obj.QuizID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestion_quizId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestion_ord(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestion_ord,
		func(ctx context.Context) (any, error) {
			return obj.Ord, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestion_ord(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestion_type(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestion_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestion_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestion_prompt(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestion_prompt,
		func(ctx context.Context) (any, error) {
			return obj.Prompt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestion_prompt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestion_promptMedia(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestion_promptMedia,
		func(ctx context.Context) (any, error) {
			return obj.PromptMedia, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_QuizQuestion_promptMedia(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestion_points(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestion_points,
		func(ctx context.Context) (any, error) {
			return obj.Points, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestion_points(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestion_metadata(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestion_metadata,
		func(ctx context.Context) (any, error) {
			return obj.Metadata, nil
		},
		nil,
		ec.marshalNJSON2map,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestion_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JSON does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestion_options(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestion_options,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.QuizQuestion().Options(ctx, obj)
		},
		nil,
		ec.marshalNQuestionOption2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐQuestionOptionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestion_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionOption_id(ctx, field)
			case "questionId":
				return ec.fieldContext_QuestionOption_questionId(ctx, field)
			case "ord":
				return ec.fieldContext_QuestionOption_ord(ctx, field)
			case "label":
				return ec.fieldContext_QuestionOption_label(ctx, field)
			case "isCorrect":
				return ec.fieldContext_QuestionOption_isCorrect(ctx, field)
			case "feedback":
				return ec.fieldContext_QuestionOption_feedback(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestionCollection_items(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestionCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestionCollection_items,
		func(ctx context.Context) (any, error) {
			return obj.Items, nil
		},
		nil,
		ec.marshalNQuizQuestion2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestionCollection_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestionCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuizQuestion_id(ctx, field)
			case "quizId":
				return ec.fieldContext_QuizQuestion_quizId(ctx, field)
			case "ord":
				return ec.fieldContext_QuizQuestion_ord(ctx, field)
			case "type":
				return ec.fieldContext_QuizQuestion_type(ctx, field)
			case "prompt":
				return ec.fieldContext_QuizQuestion_prompt(ctx, field)
			case "promptMedia":
				return ec.fieldContext_QuizQuestion_promptMedia(ctx, field)
			case "points":
				return ec.fieldContext_QuizQuestion_points(ctx, field)
			case "metadata":
				return ec.fieldContext_QuizQuestion_metadata(ctx, field)
			case "options":
				return ec.fieldContext_QuizQuestion_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuizQuestion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestionCollection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestionCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestionCollection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestionCollection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestionCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestionCollection_page(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestionCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestionCollection_page,
		func(ctx context.Context) (any, error) {
			return obj.Page, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestionCollection_page(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestionCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuizQuestionCollection_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.QuizQuestionCollection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QuizQuestionCollection_pageSize,
		func(ctx context.Context) (any, error) {
			return obj.PageSize, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QuizQuestionCollection_pageSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuizQuestionCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tag_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Tag_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_slug(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tag_slug,
		func(ctx context.Context) (any, error) {
			return obj.Slug, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Tag_slug(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tag_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Tag_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_id(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Topic_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_slug(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_slug,
		func(ctx context.Context) (any, error) {
			return obj.Slug, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Topic_slug(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_name(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Topic_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Topic_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_isRepeatable,
		func(ctx context.Context) (any, error) {
			return obj.IsRepeatable, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_locations,
		func(ctx context.Context) (any, error) {
			return obj.Locations, nil
		},
		nil,
		ec.marshalN__DirectiveLocation2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_defaultValue,
		func(ctx context.Context) (any, error) {
			return obj.DefaultValue, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_types,
		func(ctx context.Context) (any, error) {
			return obj.Types(), nil
		},
		nil,
		ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_queryType,
		func(ctx context.Context) (any, error) {
			return obj.QueryType(), nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_mutationType,
		func(ctx context.Context) (any, error) {
			return obj.MutationType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_subscriptionType,
		func(ctx context.Context) (any, error) {
			return obj.SubscriptionType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_directives,
		func(ctx context.Context) (any, error) {
			return obj.Directives(), nil
		},
		nil,
		ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind(), nil
		},
		nil,
		ec.marshalN__TypeKind2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_name,
		func(ctx context.Context) (any, error) {
			return obj.Name(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_specifiedByURL,
		func(ctx context.Context) (any, error) {
			return obj.SpecifiedByURL(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_fields,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_interfaces,
		func(ctx context.Context) (any, error) {
			return obj.Interfaces(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_possibleTypes,
		func(ctx context.Context) (any, error) {
			return obj.PossibleTypes(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_enumValues,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_inputFields,
		func(ctx context.Context) (any, error) {
			return obj.InputFields(), nil
		},
		nil,
		ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_ofType,
		func(ctx context.Context) (any, error) {
			return obj.OfType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_isOneOf,
		func(ctx context.Context) (any, error) {
			return obj.IsOneOf(), nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddFlashcardInput(ctx context.Context, obj any) (model.AddFlashcardInput, error) {
	var it model.AddFlashcardInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"setId", "frontText", "backText", "frontMediaId", "backMediaId", "hints"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "setId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("setId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SetID = data
		case "frontText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frontText"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FrontText = data
		case "backText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backText"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BackText = data
		case "frontMediaId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frontMediaId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FrontMediaID = data
		case "backMediaId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backMediaId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BackMediaID = data
		case "hints":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hints"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hints = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContentTagInput(ctx context.Context, obj any) (model.ContentTagInput, error) {
	var it model.ContentTagInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tagId", "kind", "objectId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tagId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagID = data
		case "kind":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			data, err := ec.unmarshalNContentTagKind2contentᚑservicesᚋgraphᚋmodelᚐContentTagKind(ctx, v)
			if err != nil {
				return it, err
			}
			it.Kind = data
		case "objectId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objectId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ObjectID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFlashcardSetInput(ctx context.Context, obj any) (model.CreateFlashcardSetInput, error) {
	var it model.CreateFlashcardSetInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "topicId", "levelId", "createdBy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "topicId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicID = data
		case "levelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelID = data
		case "createdBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedBy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFolderInput(ctx context.Context, obj any) (model.CreateFolderInput, error) {
	var it model.CreateFolderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "parentId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "parentId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateLessonInput(ctx context.Context, obj any) (model.CreateLessonInput, error) {
	var it model.CreateLessonInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"code", "title", "description", "topicId", "levelId", "createdBy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "topicId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicID = data
		case "levelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelID = data
		case "createdBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedBy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateLessonSectionInput(ctx context.Context, obj any) (model.CreateLessonSectionInput, error) {
	var it model.CreateLessonSectionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "body"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNLessonSectionType2contentᚑservicesᚋgraphᚋmodelᚐLessonSectionType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "body":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("body"))
			data, err := ec.unmarshalNMap2map(ctx, v)
			if err != nil {
				return it, err
			}
			it.Body = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateLevelInput(ctx context.Context, obj any) (model.CreateLevelInput, error) {
	var it model.CreateLevelInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"code", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateQuestionOptionInput(ctx context.Context, obj any) (model.CreateQuestionOptionInput, error) {
	var it model.CreateQuestionOptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ord", "label", "isCorrect", "feedback"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ord"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ord = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "isCorrect":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCorrect"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCorrect = data
		case "feedback":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Feedback = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateQuizInput(ctx context.Context, obj any) (model.CreateQuizInput, error) {
	var it model.CreateQuizInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lessonId", "topicId", "levelId", "title", "description", "timeLimitS"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lessonId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessonId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LessonID = data
		case "topicId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicID = data
		case "levelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "timeLimitS":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitS"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitS = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateQuizQuestionInput(ctx context.Context, obj any) (model.CreateQuizQuestionInput, error) {
	var it model.CreateQuizQuestionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["points"]; !present {
		asMap["points"] = 1
	}

	fieldsInOrder := [...]string{"type", "prompt", "promptMedia", "points", "metadata"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "prompt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prompt"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Prompt = data
		case "promptMedia":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("promptMedia"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PromptMedia = data
		case "points":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("points"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Points = data
		case "metadata":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
			data, err := ec.unmarshalOJSON2map(ctx, v)
			if err != nil {
				return it, err
			}
			it.Metadata = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTagInput(ctx context.Context, obj any) (model.CreateTagInput, error) {
	var it model.CreateTagInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"slug", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "slug":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slug = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTopicInput(ctx context.Context, obj any) (model.CreateTopicInput, error) {
	var it model.CreateTopicInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"slug", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "slug":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slug = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFlashcardFilterInput(ctx context.Context, obj any) (model.FlashcardFilterInput, error) {
	var it model.FlashcardFilterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"hasMedia"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "hasMedia":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMedia"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMedia = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFlashcardOrderInput(ctx context.Context, obj any) (model.FlashcardOrderInput, error) {
	var it model.FlashcardOrderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "ORD"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNFlashcardOrderField2contentᚑservicesᚋgraphᚋmodelᚐFlashcardOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFlashcardSetFilterInput(ctx context.Context, obj any) (model.FlashcardSetFilterInput, error) {
	var it model.FlashcardSetFilterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"topicId", "levelId", "createdBy", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "topicId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicID = data
		case "levelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelID = data
		case "createdBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedBy = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFlashcardSetOrderInput(ctx context.Context, obj any) (model.FlashcardSetOrderInput, error) {
	var it model.FlashcardSetOrderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "CREATED_AT"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "DESC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNFlashcardSetOrderField2contentᚑservicesᚋgraphᚋmodelᚐFlashcardSetOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFolderFilterInput(ctx context.Context, obj any) (model.FolderFilterInput, error) {
	var it model.FolderFilterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"parentId", "depth", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "parentId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		case "depth":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("depth"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Depth = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFolderOrderInput(ctx context.Context, obj any) (model.FolderOrderInput, error) {
	var it model.FolderOrderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "NAME"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNFolderOrderField2contentᚑservicesᚋgraphᚋmodelᚐFolderOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLessonFilterInput(ctx context.Context, obj any) (model.LessonFilterInput, error) {
	var it model.LessonFilterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"topicId", "levelId", "isPublished", "search", "createdBy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "topicId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicID = data
		case "levelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelID = data
		case "isPublished":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPublished"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsPublished = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		case "createdBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedBy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLessonOrderInput(ctx context.Context, obj any) (model.LessonOrderInput, error) {
	var it model.LessonOrderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "CREATED_AT"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "DESC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNLessonOrderField2contentᚑservicesᚋgraphᚋmodelᚐLessonOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLessonSectionFilterInput(ctx context.Context, obj any) (model.LessonSectionFilterInput, error) {
	var it model.LessonSectionFilterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOLessonSectionType2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLessonSectionOrderInput(ctx context.Context, obj any) (model.LessonSectionOrderInput, error) {
	var it model.LessonSectionOrderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "ORD"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNLessonSectionOrderField2contentᚑservicesᚋgraphᚋmodelᚐLessonSectionOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMediaAssetFilterInput(ctx context.Context, obj any) (model.MediaAssetFilterInput, error) {
	var it model.MediaAssetFilterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"folderId", "kind", "uploadedBy", "sha256", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "folderId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folderId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FolderID = data
		case "kind":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			data, err := ec.unmarshalOMediaKind2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaKind(ctx, v)
			if err != nil {
				return it, err
			}
			it.Kind = data
		case "uploadedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uploadedBy"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UploadedBy = data
		case "sha256":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sha256"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sha256 = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMediaAssetOrderInput(ctx context.Context, obj any) (model.MediaAssetOrderInput, error) {
	var it model.MediaAssetOrderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "CREATED_AT"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "DESC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNMediaAssetOrderField2contentᚑservicesᚋgraphᚋmodelᚐMediaAssetOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuizOrderInput(ctx context.Context, obj any) (model.QuizOrderInput, error) {
	var it model.QuizOrderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "CREATED_AT"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "DESC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNQuizOrderField2contentᚑservicesᚋgraphᚋmodelᚐQuizOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuizQuestionFilterInput(ctx context.Context, obj any) (model.QuizQuestionFilterInput, error) {
	var it model.QuizQuestionFilterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuizQuestionOrderInput(ctx context.Context, obj any) (model.QuizQuestionOrderInput, error) {
	var it model.QuizQuestionOrderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["field"]; !present {
		asMap["field"] = "ORD"
	}
	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNQuizQuestionOrderField2contentᚑservicesᚋgraphᚋmodelᚐQuizQuestionOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFolderInput(ctx context.Context, obj any) (model.UpdateFolderInput, error) {
	var it model.UpdateFolderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateLessonInput(ctx context.Context, obj any) (model.UpdateLessonInput, error) {
	var it model.UpdateLessonInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "topicId", "levelId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "topicId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicID = data
		case "levelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateLessonSectionInput(ctx context.Context, obj any) (model.UpdateLessonSectionInput, error) {
	var it model.UpdateLessonSectionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "body"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOLessonSectionType2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "body":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("body"))
			data, err := ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
			it.Body = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateLevelInput(ctx context.Context, obj any) (model.UpdateLevelInput, error) {
	var it model.UpdateLevelInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"code", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateQuestionOptionInput(ctx context.Context, obj any) (model.UpdateQuestionOptionInput, error) {
	var it model.UpdateQuestionOptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ord", "label", "isCorrect", "feedback"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ord":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ord"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ord = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "isCorrect":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCorrect"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCorrect = data
		case "feedback":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Feedback = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateQuizInput(ctx context.Context, obj any) (model.UpdateQuizInput, error) {
	var it model.UpdateQuizInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lessonId", "topicId", "levelId", "title", "description", "timeLimitS"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lessonId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessonId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LessonID = data
		case "topicId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topicId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopicID = data
		case "levelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("levelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LevelID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "timeLimitS":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimitS"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeLimitS = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTagInput(ctx context.Context, obj any) (model.UpdateTagInput, error) {
	var it model.UpdateTagInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"slug", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "slug":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slug = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopicInput(ctx context.Context, obj any) (model.UpdateTopicInput, error) {
	var it model.UpdateTopicInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"slug", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "slug":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Slug = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUploadMediaInput(ctx context.Context, obj any) (model.UploadMediaInput, error) {
	var it model.UploadMediaInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"file", "kind", "mimeType", "filename", "uploadedBy", "folderId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "file":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			data, err := ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.File = data
		case "kind":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			data, err := ec.unmarshalNMediaKind2contentᚑservicesᚋgraphᚋmodelᚐMediaKind(ctx, v)
			if err != nil {
				return it, err
			}
			it.Kind = data
		case "mimeType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeType"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeType = data
		case "filename":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filename = data
		case "uploadedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uploadedBy"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UploadedBy = data
		case "folderId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folderId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FolderID = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var contentTagImplementors = []string{"ContentTag"}

func (ec *executionContext) _ContentTag(ctx context.Context, sel ast.SelectionSet, obj *model.ContentTag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentTagImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentTag")
		case "tagId":
			out.Values[i] = ec._ContentTag_tagId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kind":
			out.Values[i] = ec._ContentTag_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "objectId":
			out.Values[i] = ec._ContentTag_objectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tag":
			out.Values[i] = ec._ContentTag_tag(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var flashcardImplementors = []string{"Flashcard"}

func (ec *executionContext) _Flashcard(ctx context.Context, sel ast.SelectionSet, obj *model.Flashcard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, flashcardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Flashcard")
		case "id":
			out.Values[i] = ec._Flashcard_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "setId":
			out.Values[i] = ec._Flashcard_setId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "frontText":
			out.Values[i] = ec._Flashcard_frontText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "backText":
			out.Values[i] = ec._Flashcard_backText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "frontMediaId":
			out.Values[i] = ec._Flashcard_frontMediaId(ctx, field, obj)
		case "backMediaId":
			out.Values[i] = ec._Flashcard_backMediaId(ctx, field, obj)
		case "ord":
			out.Values[i] = ec._Flashcard_ord(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hints":
			out.Values[i] = ec._Flashcard_hints(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Flashcard_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var flashcardCollectionImplementors = []string{"FlashcardCollection"}

func (ec *executionContext) _FlashcardCollection(ctx context.Context, sel ast.SelectionSet, obj *model.FlashcardCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, flashcardCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FlashcardCollection")
		case "items":
			out.Values[i] = ec._FlashcardCollection_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._FlashcardCollection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._FlashcardCollection_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageSize":
			out.Values[i] = ec._FlashcardCollection_pageSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var flashcardSetImplementors = []string{"FlashcardSet"}

func (ec *executionContext) _FlashcardSet(ctx context.Context, sel ast.SelectionSet, obj *model.FlashcardSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, flashcardSetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FlashcardSet")
		case "id":
			out.Values[i] = ec._FlashcardSet_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._FlashcardSet_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._FlashcardSet_description(ctx, field, obj)
		case "topicId":
			out.Values[i] = ec._FlashcardSet_topicId(ctx, field, obj)
		case "levelId":
			out.Values[i] = ec._FlashcardSet_levelId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._FlashcardSet_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			out.Values[i] = ec._FlashcardSet_createdBy(ctx, field, obj)
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FlashcardSet_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cards":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FlashcardSet_cards(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var flashcardSetListImplementors = []string{"FlashcardSetList"}

func (ec *executionContext) _FlashcardSetList(ctx context.Context, sel ast.SelectionSet, obj *model.FlashcardSetList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, flashcardSetListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FlashcardSetList")
		case "items":
			out.Values[i] = ec._FlashcardSetList_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._FlashcardSetList_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._FlashcardSetList_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageSize":
			out.Values[i] = ec._FlashcardSetList_pageSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var folderImplementors = []string{"Folder"}

func (ec *executionContext) _Folder(ctx context.Context, sel ast.SelectionSet, obj *model.Folder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, folderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Folder")
		case "id":
			out.Values[i] = ec._Folder_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Folder_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parentId":
			out.Values[i] = ec._Folder_parentId(ctx, field, obj)
		case "parent":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Folder_parent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "depth":
			out.Values[i] = ec._Folder_depth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "children":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Folder_children(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "childrenCount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Folder_childrenCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mediaCount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Folder_mediaCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Folder_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Folder_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var folderCollectionImplementors = []string{"FolderCollection"}

func (ec *executionContext) _FolderCollection(ctx context.Context, sel ast.SelectionSet, obj *model.FolderCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, folderCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FolderCollection")
		case "items":
			out.Values[i] = ec._FolderCollection_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._FolderCollection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._FolderCollection_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageSize":
			out.Values[i] = ec._FolderCollection_pageSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var folderTreeImplementors = []string{"FolderTree"}

func (ec *executionContext) _FolderTree(ctx context.Context, sel ast.SelectionSet, obj *model.FolderTree) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, folderTreeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FolderTree")
		case "folder":
			out.Values[i] = ec._FolderTree_folder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "children":
			out.Values[i] = ec._FolderTree_children(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var lessonImplementors = []string{"Lesson"}

func (ec *executionContext) _Lesson(ctx context.Context, sel ast.SelectionSet, obj *model.Lesson) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lessonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lesson")
		case "id":
			out.Values[i] = ec._Lesson_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "code":
			out.Values[i] = ec._Lesson_code(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Lesson_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Lesson_description(ctx, field, obj)
		case "topic":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Lesson_topic(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "level":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Lesson_level(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isPublished":
			out.Values[i] = ec._Lesson_isPublished(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "version":
			out.Values[i] = ec._Lesson_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			out.Values[i] = ec._Lesson_createdBy(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Lesson_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Lesson_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "publishedAt":
			out.Values[i] = ec._Lesson_publishedAt(ctx, field, obj)
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Lesson_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sections":
			out.Values[i] = ec._Lesson_sections(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var lessonCollectionImplementors = []string{"LessonCollection"}

func (ec *executionContext) _LessonCollection(ctx context.Context, sel ast.SelectionSet, obj *model.LessonCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lessonCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LessonCollection")
		case "items":
			out.Values[i] = ec._LessonCollection_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._LessonCollection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._LessonCollection_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageSize":
			out.Values[i] = ec._LessonCollection_pageSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var lessonSectionImplementors = []string{"LessonSection"}

func (ec *executionContext) _LessonSection(ctx context.Context, sel ast.SelectionSet, obj *model.LessonSection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lessonSectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LessonSection")
		case "id":
			out.Values[i] = ec._LessonSection_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lessonId":
			out.Values[i] = ec._LessonSection_lessonId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ord":
			out.Values[i] = ec._LessonSection_ord(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._LessonSection_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "body":
			out.Values[i] = ec._LessonSection_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._LessonSection_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var lessonSectionCollectionImplementors = []string{"LessonSectionCollection"}

func (ec *executionContext) _LessonSectionCollection(ctx context.Context, sel ast.SelectionSet, obj *model.LessonSectionCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lessonSectionCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LessonSectionCollection")
		case "items":
			out.Values[i] = ec._LessonSectionCollection_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._LessonSectionCollection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._LessonSectionCollection_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageSize":
			out.Values[i] = ec._LessonSectionCollection_pageSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var levelImplementors = []string{"Level"}

func (ec *executionContext) _Level(ctx context.Context, sel ast.SelectionSet, obj *model.Level) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, levelImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Level")
		case "id":
			out.Values[i] = ec._Level_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._Level_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Level_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaAssetImplementors = []string{"MediaAsset"}

func (ec *executionContext) _MediaAsset(ctx context.Context, sel ast.SelectionSet, obj *model.MediaAsset) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaAssetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaAsset")
		case "id":
			out.Values[i] = ec._MediaAsset_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "storageKey":
			out.Values[i] = ec._MediaAsset_storageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "kind":
			out.Values[i] = ec._MediaAsset_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mimeType":
			out.Values[i] = ec._MediaAsset_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "folderId":
			out.Values[i] = ec._MediaAsset_folderId(ctx, field, obj)
		case "originalName":
			out.Values[i] = ec._MediaAsset_originalName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thumbnailURL":
			out.Values[i] = ec._MediaAsset_thumbnailURL(ctx, field, obj)
		case "bytes":
			out.Values[i] = ec._MediaAsset_bytes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "durationMs":
			out.Values[i] = ec._MediaAsset_durationMs(ctx, field, obj)
		case "sha256":
			out.Values[i] = ec._MediaAsset_sha256(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MediaAsset_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uploadedBy":
			out.Values[i] = ec._MediaAsset_uploadedBy(ctx, field, obj)
		case "downloadURL":
			out.Values[i] = ec._MediaAsset_downloadURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaAssetCollectionImplementors = []string{"MediaAssetCollection"}

func (ec *executionContext) _MediaAssetCollection(ctx context.Context, sel ast.SelectionSet, obj *model.MediaAssetCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaAssetCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaAssetCollection")
		case "items":
			out.Values[i] = ec._MediaAssetCollection_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._MediaAssetCollection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._MediaAssetCollection_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageSize":
			out.Values[i] = ec._MediaAssetCollection_pageSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createTopic":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTopic(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTopic":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTopic(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTopic":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTopic(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLevel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLevel(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateLevel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLevel(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteLevel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLevel(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createFolder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createFolder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateFolder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateFolder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteFolder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteFolder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uploadMedia":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadMedia(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMedia":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMedia(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLesson":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLesson(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateLesson":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLesson(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteLesson":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLesson(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "publishLesson":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_publishLesson(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unpublishLesson":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unpublishLesson(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLessonSection":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLessonSection(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateLessonSection":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLessonSection(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteLessonSection":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLessonSection(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createFlashcardSet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createFlashcardSet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addFlashcard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addFlashcard(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createQuiz":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createQuiz(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateQuiz":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateQuiz(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteQuiz":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteQuiz(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addQuizQuestion":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addQuizQuestion(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addQuestionOption":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addQuestionOption(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateQuestionOption":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateQuestionOption(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteQuestionOption":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteQuestionOption(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addContentTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addContentTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "removeContentTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeContentTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "health":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_health(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "topic":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_topic(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "topics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_topics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "level":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_level(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "levels":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_levels(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tag":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tag(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tags(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "folder":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_folder(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "folders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_folders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "rootFolders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rootFolders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "folderTree":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_folderTree(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "folderPath":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_folderPath(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mediaAsset":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mediaAsset(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mediaAssets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mediaAssets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mediaAssetCollection":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mediaAssetCollection(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "lesson":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lesson(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "lessonByCode":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lessonByCode(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "quiz":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_quiz(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "quizzes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_quizzes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "quizQuestions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_quizQuestions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "flashcardSet":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_flashcardSet(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "flashcardSets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_flashcardSets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "flashcards":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_flashcards(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "lessons":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lessons(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "lessonSections":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lessonSections(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionOptionImplementors = []string{"QuestionOption"}

func (ec *executionContext) _QuestionOption(ctx context.Context, sel ast.SelectionSet, obj *model.QuestionOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionOption")
		case "id":
			out.Values[i] = ec._QuestionOption_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "questionId":
			out.Values[i] = ec._QuestionOption_questionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ord":
			out.Values[i] = ec._QuestionOption_ord(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._QuestionOption_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isCorrect":
			out.Values[i] = ec._QuestionOption_isCorrect(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "feedback":
			out.Values[i] = ec._QuestionOption_feedback(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quizImplementors = []string{"Quiz"}

func (ec *executionContext) _Quiz(ctx context.Context, sel ast.SelectionSet, obj *model.Quiz) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quizImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Quiz")
		case "id":
			out.Values[i] = ec._Quiz_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lessonId":
			out.Values[i] = ec._Quiz_lessonId(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Quiz_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Quiz_description(ctx, field, obj)
		case "totalPoints":
			out.Values[i] = ec._Quiz_totalPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeLimitS":
			out.Values[i] = ec._Quiz_timeLimitS(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Quiz_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topic":
			out.Values[i] = ec._Quiz_topic(ctx, field, obj)
		case "level":
			out.Values[i] = ec._Quiz_level(ctx, field, obj)
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Quiz_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "questions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Quiz_questions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quizCollectionImplementors = []string{"QuizCollection"}

func (ec *executionContext) _QuizCollection(ctx context.Context, sel ast.SelectionSet, obj *model.QuizCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quizCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuizCollection")
		case "items":
			out.Values[i] = ec._QuizCollection_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._QuizCollection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._QuizCollection_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageSize":
			out.Values[i] = ec._QuizCollection_pageSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quizQuestionImplementors = []string{"QuizQuestion"}

func (ec *executionContext) _QuizQuestion(ctx context.Context, sel ast.SelectionSet, obj *model.QuizQuestion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quizQuestionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuizQuestion")
		case "id":
			out.Values[i] = ec._QuizQuestion_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "quizId":
			out.Values[i] = ec._QuizQuestion_quizId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ord":
			out.Values[i] = ec._QuizQuestion_ord(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._QuizQuestion_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "prompt":
			out.Values[i] = ec._QuizQuestion_prompt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "promptMedia":
			out.Values[i] = ec._QuizQuestion_promptMedia(ctx, field, obj)
		case "points":
			out.Values[i] = ec._QuizQuestion_points(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "metadata":
			out.Values[i] = ec._QuizQuestion_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "options":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QuizQuestion_options(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quizQuestionCollectionImplementors = []string{"QuizQuestionCollection"}

func (ec *executionContext) _QuizQuestionCollection(ctx context.Context, sel ast.SelectionSet, obj *model.QuizQuestionCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quizQuestionCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuizQuestionCollection")
		case "items":
			out.Values[i] = ec._QuizQuestionCollection_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._QuizQuestionCollection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "page":
			out.Values[i] = ec._QuizQuestionCollection_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageSize":
			out.Values[i] = ec._QuizQuestionCollection_pageSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *model.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":
			out.Values[i] = ec._Tag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "slug":
			out.Values[i] = ec._Tag_slug(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Tag_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topicImplementors = []string{"Topic"}

func (ec *executionContext) _Topic(ctx context.Context, sel ast.SelectionSet, obj *model.Topic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Topic")
		case "id":
			out.Values[i] = ec._Topic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "slug":
			out.Values[i] = ec._Topic_slug(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Topic_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Topic_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAddFlashcardInput2contentᚑservicesᚋgraphᚋmodelᚐAddFlashcardInput(ctx context.Context, v any) (model.AddFlashcardInput, error) {
	res, err := ec.unmarshalInputAddFlashcardInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNContentTag2contentᚑservicesᚋgraphᚋmodelᚐContentTag(ctx context.Context, sel ast.SelectionSet, v model.ContentTag) graphql.Marshaler {
	return ec._ContentTag(ctx, sel, &v)
}

func (ec *executionContext) marshalNContentTag2ᚖcontentᚑservicesᚋgraphᚋmodelᚐContentTag(ctx context.Context, sel ast.SelectionSet, v *model.ContentTag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContentTag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContentTagInput2contentᚑservicesᚋgraphᚋmodelᚐContentTagInput(ctx context.Context, v any) (model.ContentTagInput, error) {
	res, err := ec.unmarshalInputContentTagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContentTagKind2contentᚑservicesᚋgraphᚋmodelᚐContentTagKind(ctx context.Context, v any) (model.ContentTagKind, error) {
	var res model.ContentTagKind
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContentTagKind2contentᚑservicesᚋgraphᚋmodelᚐContentTagKind(ctx context.Context, sel ast.SelectionSet, v model.ContentTagKind) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCreateFlashcardSetInput2contentᚑservicesᚋgraphᚋmodelᚐCreateFlashcardSetInput(ctx context.Context, v any) (model.CreateFlashcardSetInput, error) {
	res, err := ec.unmarshalInputCreateFlashcardSetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateFolderInput2contentᚑservicesᚋgraphᚋmodelᚐCreateFolderInput(ctx context.Context, v any) (model.CreateFolderInput, error) {
	res, err := ec.unmarshalInputCreateFolderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateLessonInput2contentᚑservicesᚋgraphᚋmodelᚐCreateLessonInput(ctx context.Context, v any) (model.CreateLessonInput, error) {
	res, err := ec.unmarshalInputCreateLessonInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateLessonSectionInput2contentᚑservicesᚋgraphᚋmodelᚐCreateLessonSectionInput(ctx context.Context, v any) (model.CreateLessonSectionInput, error) {
	res, err := ec.unmarshalInputCreateLessonSectionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateLevelInput2contentᚑservicesᚋgraphᚋmodelᚐCreateLevelInput(ctx context.Context, v any) (model.CreateLevelInput, error) {
	res, err := ec.unmarshalInputCreateLevelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateQuestionOptionInput2contentᚑservicesᚋgraphᚋmodelᚐCreateQuestionOptionInput(ctx context.Context, v any) (model.CreateQuestionOptionInput, error) {
	res, err := ec.unmarshalInputCreateQuestionOptionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateQuizInput2contentᚑservicesᚋgraphᚋmodelᚐCreateQuizInput(ctx context.Context, v any) (model.CreateQuizInput, error) {
	res, err := ec.unmarshalInputCreateQuizInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateQuizQuestionInput2contentᚑservicesᚋgraphᚋmodelᚐCreateQuizQuestionInput(ctx context.Context, v any) (model.CreateQuizQuestionInput, error) {
	res, err := ec.unmarshalInputCreateQuizQuestionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTagInput2contentᚑservicesᚋgraphᚋmodelᚐCreateTagInput(ctx context.Context, v any) (model.CreateTagInput, error) {
	res, err := ec.unmarshalInputCreateTagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTopicInput2contentᚑservicesᚋgraphᚋmodelᚐCreateTopicInput(ctx context.Context, v any) (model.CreateTopicInput, error) {
	res, err := ec.unmarshalInputCreateTopicInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFlashcard2contentᚑservicesᚋgraphᚋmodelᚐFlashcard(ctx context.Context, sel ast.SelectionSet, v model.Flashcard) graphql.Marshaler {
	return ec._Flashcard(ctx, sel, &v)
}

func (ec *executionContext) marshalNFlashcard2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Flashcard) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFlashcard2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcard(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFlashcard2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcard(ctx context.Context, sel ast.SelectionSet, v *model.Flashcard) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Flashcard(ctx, sel, v)
}

func (ec *executionContext) marshalNFlashcardCollection2contentᚑservicesᚋgraphᚋmodelᚐFlashcardCollection(ctx context.Context, sel ast.SelectionSet, v model.FlashcardCollection) graphql.Marshaler {
	return ec._FlashcardCollection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFlashcardCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardCollection(ctx context.Context, sel ast.SelectionSet, v *model.FlashcardCollection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FlashcardCollection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFlashcardOrderField2contentᚑservicesᚋgraphᚋmodelᚐFlashcardOrderField(ctx context.Context, v any) (model.FlashcardOrderField, error) {
	var res model.FlashcardOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFlashcardOrderField2contentᚑservicesᚋgraphᚋmodelᚐFlashcardOrderField(ctx context.Context, sel ast.SelectionSet, v model.FlashcardOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFlashcardSet2contentᚑservicesᚋgraphᚋmodelᚐFlashcardSet(ctx context.Context, sel ast.SelectionSet, v model.FlashcardSet) graphql.Marshaler {
	return ec._FlashcardSet(ctx, sel, &v)
}

func (ec *executionContext) marshalNFlashcardSet2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSetᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FlashcardSet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFlashcardSet2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFlashcardSet2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSet(ctx context.Context, sel ast.SelectionSet, v *model.FlashcardSet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FlashcardSet(ctx, sel, v)
}

func (ec *executionContext) marshalNFlashcardSetList2contentᚑservicesᚋgraphᚋmodelᚐFlashcardSetList(ctx context.Context, sel ast.SelectionSet, v model.FlashcardSetList) graphql.Marshaler {
	return ec._FlashcardSetList(ctx, sel, &v)
}

func (ec *executionContext) marshalNFlashcardSetList2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSetList(ctx context.Context, sel ast.SelectionSet, v *model.FlashcardSetList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FlashcardSetList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFlashcardSetOrderField2contentᚑservicesᚋgraphᚋmodelᚐFlashcardSetOrderField(ctx context.Context, v any) (model.FlashcardSetOrderField, error) {
	var res model.FlashcardSetOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFlashcardSetOrderField2contentᚑservicesᚋgraphᚋmodelᚐFlashcardSetOrderField(ctx context.Context, sel ast.SelectionSet, v model.FlashcardSetOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFolder2contentᚑservicesᚋgraphᚋmodelᚐFolder(ctx context.Context, sel ast.SelectionSet, v model.Folder) graphql.Marshaler {
	return ec._Folder(ctx, sel, &v)
}

func (ec *executionContext) marshalNFolder2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Folder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFolder2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFolder2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolder(ctx context.Context, sel ast.SelectionSet, v *model.Folder) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Folder(ctx, sel, v)
}

func (ec *executionContext) marshalNFolderCollection2contentᚑservicesᚋgraphᚋmodelᚐFolderCollection(ctx context.Context, sel ast.SelectionSet, v model.FolderCollection) graphql.Marshaler {
	return ec._FolderCollection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFolderCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderCollection(ctx context.Context, sel ast.SelectionSet, v *model.FolderCollection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FolderCollection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFolderOrderField2contentᚑservicesᚋgraphᚋmodelᚐFolderOrderField(ctx context.Context, v any) (model.FolderOrderField, error) {
	var res model.FolderOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFolderOrderField2contentᚑservicesᚋgraphᚋmodelᚐFolderOrderField(ctx context.Context, sel ast.SelectionSet, v model.FolderOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFolderTree2contentᚑservicesᚋgraphᚋmodelᚐFolderTree(ctx context.Context, sel ast.SelectionSet, v model.FolderTree) graphql.Marshaler {
	return ec._FolderTree(ctx, sel, &v)
}

func (ec *executionContext) marshalNFolderTree2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderTreeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FolderTree) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFolderTree2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderTree(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFolderTree2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderTree(ctx context.Context, sel ast.SelectionSet, v *model.FolderTree) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FolderTree(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJSON2map(ctx context.Context, v any) (map[string]any, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSON2map(ctx context.Context, sel ast.SelectionSet, v map[string]any) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLesson2contentᚑservicesᚋgraphᚋmodelᚐLesson(ctx context.Context, sel ast.SelectionSet, v model.Lesson) graphql.Marshaler {
	return ec._Lesson(ctx, sel, &v)
}

func (ec *executionContext) marshalNLesson2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Lesson) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLesson2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLesson(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLesson2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLesson(ctx context.Context, sel ast.SelectionSet, v *model.Lesson) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Lesson(ctx, sel, v)
}

func (ec *executionContext) marshalNLessonCollection2contentᚑservicesᚋgraphᚋmodelᚐLessonCollection(ctx context.Context, sel ast.SelectionSet, v model.LessonCollection) graphql.Marshaler {
	return ec._LessonCollection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLessonCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonCollection(ctx context.Context, sel ast.SelectionSet, v *model.LessonCollection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LessonCollection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLessonOrderField2contentᚑservicesᚋgraphᚋmodelᚐLessonOrderField(ctx context.Context, v any) (model.LessonOrderField, error) {
	var res model.LessonOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLessonOrderField2contentᚑservicesᚋgraphᚋmodelᚐLessonOrderField(ctx context.Context, sel ast.SelectionSet, v model.LessonOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNLessonSection2contentᚑservicesᚋgraphᚋmodelᚐLessonSection(ctx context.Context, sel ast.SelectionSet, v model.LessonSection) graphql.Marshaler {
	return ec._LessonSection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLessonSection2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.LessonSection) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLessonSection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLessonSection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSection(ctx context.Context, sel ast.SelectionSet, v *model.LessonSection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LessonSection(ctx, sel, v)
}

func (ec *executionContext) marshalNLessonSectionCollection2contentᚑservicesᚋgraphᚋmodelᚐLessonSectionCollection(ctx context.Context, sel ast.SelectionSet, v model.LessonSectionCollection) graphql.Marshaler {
	return ec._LessonSectionCollection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLessonSectionCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionCollection(ctx context.Context, sel ast.SelectionSet, v *model.LessonSectionCollection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LessonSectionCollection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLessonSectionOrderField2contentᚑservicesᚋgraphᚋmodelᚐLessonSectionOrderField(ctx context.Context, v any) (model.LessonSectionOrderField, error) {
	var res model.LessonSectionOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLessonSectionOrderField2contentᚑservicesᚋgraphᚋmodelᚐLessonSectionOrderField(ctx context.Context, sel ast.SelectionSet, v model.LessonSectionOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNLessonSectionType2contentᚑservicesᚋgraphᚋmodelᚐLessonSectionType(ctx context.Context, v any) (model.LessonSectionType, error) {
	var res model.LessonSectionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLessonSectionType2contentᚑservicesᚋgraphᚋmodelᚐLessonSectionType(ctx context.Context, sel ast.SelectionSet, v model.LessonSectionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNLevel2contentᚑservicesᚋgraphᚋmodelᚐLevel(ctx context.Context, sel ast.SelectionSet, v model.Level) graphql.Marshaler {
	return ec._Level(ctx, sel, &v)
}

func (ec *executionContext) marshalNLevel2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐLevelᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Level) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLevel2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLevel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLevel2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLevel(ctx context.Context, sel ast.SelectionSet, v *model.Level) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Level(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v any) (map[string]any, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]any) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMediaAsset2contentᚑservicesᚋgraphᚋmodelᚐMediaAsset(ctx context.Context, sel ast.SelectionSet, v model.MediaAsset) graphql.Marshaler {
	return ec._MediaAsset(ctx, sel, &v)
}

func (ec *executionContext) marshalNMediaAsset2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAssetᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MediaAsset) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMediaAsset2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAsset(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMediaAsset2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAsset(ctx context.Context, sel ast.SelectionSet, v *model.MediaAsset) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MediaAsset(ctx, sel, v)
}

func (ec *executionContext) marshalNMediaAssetCollection2contentᚑservicesᚋgraphᚋmodelᚐMediaAssetCollection(ctx context.Context, sel ast.SelectionSet, v model.MediaAssetCollection) graphql.Marshaler {
	return ec._MediaAssetCollection(ctx, sel, &v)
}

func (ec *executionContext) marshalNMediaAssetCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAssetCollection(ctx context.Context, sel ast.SelectionSet, v *model.MediaAssetCollection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MediaAssetCollection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMediaAssetOrderField2contentᚑservicesᚋgraphᚋmodelᚐMediaAssetOrderField(ctx context.Context, v any) (model.MediaAssetOrderField, error) {
	var res model.MediaAssetOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMediaAssetOrderField2contentᚑservicesᚋgraphᚋmodelᚐMediaAssetOrderField(ctx context.Context, sel ast.SelectionSet, v model.MediaAssetOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMediaKind2contentᚑservicesᚋgraphᚋmodelᚐMediaKind(ctx context.Context, v any) (model.MediaKind, error) {
	var res model.MediaKind
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMediaKind2contentᚑservicesᚋgraphᚋmodelᚐMediaKind(ctx context.Context, sel ast.SelectionSet, v model.MediaKind) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx context.Context, v any) (model.OrderDirection, error) {
	var res model.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2contentᚑservicesᚋgraphᚋmodelᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v model.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNQuestionOption2contentᚑservicesᚋgraphᚋmodelᚐQuestionOption(ctx context.Context, sel ast.SelectionSet, v model.QuestionOption) graphql.Marshaler {
	return ec._QuestionOption(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuestionOption2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐQuestionOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.QuestionOption) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuestionOption2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuestionOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuestionOption2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuestionOption(ctx context.Context, sel ast.SelectionSet, v *model.QuestionOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuestionOption(ctx, sel, v)
}

func (ec *executionContext) marshalNQuiz2contentᚑservicesᚋgraphᚋmodelᚐQuiz(ctx context.Context, sel ast.SelectionSet, v model.Quiz) graphql.Marshaler {
	return ec._Quiz(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuiz2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Quiz) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuiz2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuiz(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuiz2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuiz(ctx context.Context, sel ast.SelectionSet, v *model.Quiz) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Quiz(ctx, sel, v)
}

func (ec *executionContext) marshalNQuizCollection2contentᚑservicesᚋgraphᚋmodelᚐQuizCollection(ctx context.Context, sel ast.SelectionSet, v model.QuizCollection) graphql.Marshaler {
	return ec._QuizCollection(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuizCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizCollection(ctx context.Context, sel ast.SelectionSet, v *model.QuizCollection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuizCollection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNQuizOrderField2contentᚑservicesᚋgraphᚋmodelᚐQuizOrderField(ctx context.Context, v any) (model.QuizOrderField, error) {
	var res model.QuizOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQuizOrderField2contentᚑservicesᚋgraphᚋmodelᚐQuizOrderField(ctx context.Context, sel ast.SelectionSet, v model.QuizOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNQuizQuestion2contentᚑservicesᚋgraphᚋmodelᚐQuizQuestion(ctx context.Context, sel ast.SelectionSet, v model.QuizQuestion) graphql.Marshaler {
	return ec._QuizQuestion(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuizQuestion2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.QuizQuestion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuizQuestion2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuizQuestion2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestion(ctx context.Context, sel ast.SelectionSet, v *model.QuizQuestion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuizQuestion(ctx, sel, v)
}

func (ec *executionContext) marshalNQuizQuestionCollection2contentᚑservicesᚋgraphᚋmodelᚐQuizQuestionCollection(ctx context.Context, sel ast.SelectionSet, v model.QuizQuestionCollection) graphql.Marshaler {
	return ec._QuizQuestionCollection(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuizQuestionCollection2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestionCollection(ctx context.Context, sel ast.SelectionSet, v *model.QuizQuestionCollection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuizQuestionCollection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNQuizQuestionOrderField2contentᚑservicesᚋgraphᚋmodelᚐQuizQuestionOrderField(ctx context.Context, v any) (model.QuizQuestionOrderField, error) {
	var res model.QuizQuestionOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQuizQuestionOrderField2contentᚑservicesᚋgraphᚋmodelᚐQuizQuestionOrderField(ctx context.Context, sel ast.SelectionSet, v model.QuizQuestionOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTag2contentᚑservicesᚋgraphᚋmodelᚐTag(ctx context.Context, sel ast.SelectionSet, v model.Tag) graphql.Marshaler {
	return ec._Tag(ctx, sel, &v)
}

func (ec *executionContext) marshalNTag2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Tag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTag2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTag2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTag(ctx context.Context, sel ast.SelectionSet, v *model.Tag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := ec.unmarshalInputTime(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return ec._Time(ctx, sel, &v)
}

func (ec *executionContext) marshalNTopic2contentᚑservicesᚋgraphᚋmodelᚐTopic(ctx context.Context, sel ast.SelectionSet, v model.Topic) graphql.Marshaler {
	return ec._Topic(ctx, sel, &v)
}

func (ec *executionContext) marshalNTopic2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐTopicᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Topic) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopic2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTopic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTopic2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTopic(ctx context.Context, sel ast.SelectionSet, v *model.Topic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Topic(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateFolderInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateFolderInput(ctx context.Context, v any) (model.UpdateFolderInput, error) {
	res, err := ec.unmarshalInputUpdateFolderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateLessonInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateLessonInput(ctx context.Context, v any) (model.UpdateLessonInput, error) {
	res, err := ec.unmarshalInputUpdateLessonInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateLessonSectionInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateLessonSectionInput(ctx context.Context, v any) (model.UpdateLessonSectionInput, error) {
	res, err := ec.unmarshalInputUpdateLessonSectionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateLevelInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateLevelInput(ctx context.Context, v any) (model.UpdateLevelInput, error) {
	res, err := ec.unmarshalInputUpdateLevelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateQuestionOptionInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateQuestionOptionInput(ctx context.Context, v any) (model.UpdateQuestionOptionInput, error) {
	res, err := ec.unmarshalInputUpdateQuestionOptionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateQuizInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateQuizInput(ctx context.Context, v any) (model.UpdateQuizInput, error) {
	res, err := ec.unmarshalInputUpdateQuizInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTagInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateTagInput(ctx context.Context, v any) (model.UpdateTagInput, error) {
	res, err := ec.unmarshalInputUpdateTagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopicInput2contentᚑservicesᚋgraphᚋmodelᚐUpdateTopicInput(ctx context.Context, v any) (model.UpdateTopicInput, error) {
	res, err := ec.unmarshalInputUpdateTopicInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v any) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUploadMediaInput2contentᚑservicesᚋgraphᚋmodelᚐUploadMediaInput(ctx context.Context, v any) (model.UploadMediaInput, error) {
	res, err := ec.unmarshalInputUploadMediaInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOFlashcardFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardFilterInput(ctx context.Context, v any) (*model.FlashcardFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFlashcardFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFlashcardOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardOrderInput(ctx context.Context, v any) (*model.FlashcardOrderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFlashcardOrderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFlashcardSet2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSet(ctx context.Context, sel ast.SelectionSet, v *model.FlashcardSet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FlashcardSet(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFlashcardSetFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSetFilterInput(ctx context.Context, v any) (*model.FlashcardSetFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFlashcardSetFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFlashcardSetOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFlashcardSetOrderInput(ctx context.Context, v any) (*model.FlashcardSetOrderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFlashcardSetOrderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFolder2ᚕᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Folder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFolder2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOFolder2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolder(ctx context.Context, sel ast.SelectionSet, v *model.Folder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Folder(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFolderFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderFilterInput(ctx context.Context, v any) (*model.FolderFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFolderFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFolderOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐFolderOrderInput(ctx context.Context, v any) (*model.FolderOrderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFolderOrderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOJSON2map(ctx context.Context, v any) (map[string]any, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJSON2map(ctx context.Context, sel ast.SelectionSet, v map[string]any) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalMap(v)
	return res
}

func (ec *executionContext) marshalOLesson2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLesson(ctx context.Context, sel ast.SelectionSet, v *model.Lesson) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Lesson(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLessonFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonFilterInput(ctx context.Context, v any) (*model.LessonFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLessonFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLessonOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonOrderInput(ctx context.Context, v any) (*model.LessonOrderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLessonOrderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLessonSectionFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionFilterInput(ctx context.Context, v any) (*model.LessonSectionFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLessonSectionFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLessonSectionOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionOrderInput(ctx context.Context, v any) (*model.LessonSectionOrderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLessonSectionOrderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLessonSectionType2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionType(ctx context.Context, v any) (*model.LessonSectionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.LessonSectionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLessonSectionType2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLessonSectionType(ctx context.Context, sel ast.SelectionSet, v *model.LessonSectionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOLevel2ᚖcontentᚑservicesᚋgraphᚋmodelᚐLevel(ctx context.Context, sel ast.SelectionSet, v *model.Level) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Level(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v any) (map[string]any, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]any) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalMap(v)
	return res
}

func (ec *executionContext) marshalOMediaAsset2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAsset(ctx context.Context, sel ast.SelectionSet, v *model.MediaAsset) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MediaAsset(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMediaAssetFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAssetFilterInput(ctx context.Context, v any) (*model.MediaAssetFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMediaAssetFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMediaAssetOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaAssetOrderInput(ctx context.Context, v any) (*model.MediaAssetOrderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMediaAssetOrderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMediaKind2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaKind(ctx context.Context, v any) (*model.MediaKind, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MediaKind)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMediaKind2ᚖcontentᚑservicesᚋgraphᚋmodelᚐMediaKind(ctx context.Context, sel ast.SelectionSet, v *model.MediaKind) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOQuiz2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuiz(ctx context.Context, sel ast.SelectionSet, v *model.Quiz) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Quiz(ctx, sel, v)
}

func (ec *executionContext) unmarshalOQuizOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizOrderInput(ctx context.Context, v any) (*model.QuizOrderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQuizOrderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOQuizQuestionFilterInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestionFilterInput(ctx context.Context, v any) (*model.QuizQuestionFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQuizQuestionFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOQuizQuestionOrderInput2ᚖcontentᚑservicesᚋgraphᚋmodelᚐQuizQuestionOrderInput(ctx context.Context, v any) (*model.QuizQuestionOrderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQuizQuestionOrderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTag2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTag(ctx context.Context, sel ast.SelectionSet, v *model.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTime(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Time(ctx, sel, v)
}

func (ec *executionContext) marshalOTopic2ᚖcontentᚑservicesᚋgraphᚋmodelᚐTopic(ctx context.Context, sel ast.SelectionSet, v *model.Topic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Topic(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
